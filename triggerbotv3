-- Advanced Player ESP System with Auto-Repair, Performance Optimization and Diagnostics
-- This script creates a smart ESP system with comprehensive error handling and self-repair

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Configuration with default values
local ESP = {
    Enabled = true,
    BoxColor = Color3.fromRGB(255, 0, 0),
    BoxTransparency = 0.5,
    BoxThickness = 2,
    TeamCheck = false,
    RenderDistance = 1000,
    UpdateRate = 1/60,
    ShowHealthBar = true,
    ShowDistance = true,
    RainbowMode = false,
    ShowHeadDot = false,
    ShowTracers = false,
    ShowChams = false,
    ChamsTransparency = 0.8,
    ShowBoundingBox = true,
    AutoFixEnabled = true,
    OptimizationLevel = 2, -- 1 = Low, 2 = Medium, 3 = High
    PerformanceMode = false,
    RefreshRate = 0.1, -- 0.1 = 10Hz refresh rate for performance mode
    TargetFPS = 60,
    VisibilityCheck = false, -- Ray casting to check if player is visible
    PredictMovement = false,
    PredictionAmount = 0.5, -- 0.5 seconds into the future
    UseTeamColors = false,
    AlwaysOnTop = true,
    BoxStyle = 1, -- 1 = Regular, 2 = 3D, 3 = Corner
    CustomText = "",
    ShowSkeleton = false,
    HeadDotSize = 5,
    TracerOrigin = 2, -- 1 = Top, 2 = Center, 3 = Bottom
    HighlightTarget = false,
    TargetColor = Color3.fromRGB(255, 255, 0),
    ShowWeapon = false,
    ShowPlayers = true,
    ShowNPCs = false, -- For games that have NPCs
    StatusChecks = true,
    DebugMode = false
}

-- Diagnostic data for performance monitoring
local Diagnostics = {
    FrameUpdateTimes = {},
    Errors = {},
    LastFixAttempt = 0,
    FixAttempts = 0,
    MaxFixAttempts = 5,
    LastErrorTime = 0,
    ErrorCount = 0,
    FPSHistory = {},
    DrawCalls = 0,
    ActiveESPObjects = 0,
    MemoryUsage = 0,
    FailedDraws = 0,
    OverdrawnObjects = 0
}

-- GUI Objects
local ScreenGui, SettingsGui
local MainFrame, DiagnosticsPanel

-- Storage for ESP objects
local ESPObjects = {}
local HighlightedObjects = {}
local TracerObjects = {}
local HeadDotObjects = {}
local SkeletonObjects = {}
local ChamsObjects = {}
local TargetPlayer = nil

-- Create Error Handling System
local function logError(errorType, details, critical)
    local timestamp = os.time()
    table.insert(Diagnostics.Errors, {
        Type = errorType,
        Details = details,
        Time = timestamp,
        Critical = critical or false
    })
    
    Diagnostics.LastErrorTime = timestamp
    Diagnostics.ErrorCount = Diagnostics.ErrorCount + 1
    
    -- Only keep the last 50 errors
    if #Diagnostics.Errors > 50 then
        table.remove(Diagnostics.Errors, 1)
    end
    
    if ESP.DebugMode then
        print("[ESP ERROR] " .. errorType .. ": " .. details)
    end
    
    -- Auto-fix attempt for critical errors
    if critical and ESP.AutoFixEnabled and (timestamp - Diagnostics.LastFixAttempt > 10) then
        attemptFixESP(errorType)
    end
end

-- Performance monitoring
local function recordFrameTime(frameTime)
    table.insert(Diagnostics.FrameUpdateTimes, frameTime)
    
    -- Only keep the last 100 frame times
    if #Diagnostics.FrameUpdateTimes > 100 then
        table.remove(Diagnostics.FrameUpdateTimes, 1)
    end
    
    -- Record FPS
    local fps = 1 / frameTime
    table.insert(Diagnostics.FPSHistory, fps)
    
    if #Diagnostics.FPSHistory > 100 then
        table.remove(Diagnostics.FPSHistory, 1)
    end
end

-- Calculate average FPS
local function getAverageFPS()
    if #Diagnostics.FPSHistory == 0 then
        return 0
    end
    
    local sum = 0
    for _, fps in ipairs(Diagnostics.FPSHistory) do
        sum = sum + fps
    end
    
    return sum / #Diagnostics.FPSHistory
end

-- Auto-fixing system
local function attemptFixESP(errorType)
    Diagnostics.LastFixAttempt = os.time()
    Diagnostics.FixAttempts = Diagnostics.FixAttempts + 1
    
    if ESP.DebugMode then
        print("[ESP AUTO-FIX] Attempting to fix " .. errorType .. " (Attempt " .. Diagnostics.FixAttempts .. ")")
    end
    
    -- If we've tried to fix too many times, reset everything
    if Diagnostics.FixAttempts >= Diagnostics.MaxFixAttempts then
        resetESP()
        return
    end
    
    -- Specific fixes for different error types
    if errorType == "ConnectionError" then
        -- Reconnect events
        reconnectEvents()
    elseif errorType == "RenderError" then
        -- Clear and recreate all ESP objects
        clearESPObjects()
        rebuildESPObjects()
    elseif errorType == "MemoryError" then
        -- Clear unused objects and reduce drawing
        clearESPObjects()
        ESP.OptimizationLevel = ESP.OptimizationLevel + 1
        if ESP.OptimizationLevel > 3 then
            ESP.OptimizationLevel = 3
        end
        rebuildESPObjects()
    elseif errorType == "PerformanceError" then
        -- Reduce quality to improve performance
        ESP.BoxStyle = 1
        ESP.ShowChams = false
        ESP.ShowSkeleton = false
        ESP.ShowTracers = false
        ESP.PerformanceMode = true
        ESP.RefreshRate = 0.2
    else
        -- Generic fix - reconstruct the ESP
        resetESP()
    end
end

-- Complete ESP reset
local function resetESP()
    if ESP.DebugMode then
        print("[ESP RESET] Performing complete ESP reset")
    end
    
    -- Clear all objects
    clearESPObjects()
    
    -- Recreate the GUI
    if ScreenGui then
        ScreenGui:Destroy()
    end
    
    -- Recreate everything
    createESPGui()
    
    -- Reset diagnostic data
    Diagnostics.FixAttempts = 0
    Diagnostics.LastFixAttempt = os.time()
    Diagnostics.ErrorCount = 0
    
    -- Rebuild all ESP objects
    rebuildESPObjects()
    
    -- Force update
    updateESP()
end

-- Clear all ESP Objects
local function clearESPObjects()
    -- Clear all ESP objects
    for player, box in pairs(ESPObjects) do
        if box and box.Parent then
            box:Destroy()
        end
    end
    
    for player, highlight in pairs(HighlightedObjects) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    
    for player, tracer in pairs(TracerObjects) do
        if tracer and tracer.Parent then
            tracer:Destroy()
        end
    end
    
    for player, headDot in pairs(HeadDotObjects) do
        if headDot and headDot.Parent then
            headDot:Destroy()
        end
    end
    
    for player, skeleton in pairs(SkeletonObjects) do
        if skeleton and skeleton.Parent then
            skeleton:Destroy()
        end
    end
    
    for player, chams in pairs(ChamsObjects) do
        if chams and chams.Parent then
            chams:Destroy()
        end
    end
    
    -- Reset tables
    ESPObjects = {}
    HighlightedObjects = {}
    TracerObjects = {}
    HeadDotObjects = {}
    SkeletonObjects = {}
    ChamsObjects = {}
}

-- Rebuild all ESP objects
local function rebuildESPObjects()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            createESPBox(player)
            
            if ESP.ShowChams then
                createChams(player)
            end
            
            if ESP.ShowTracers then
                createTracer(player)
            end
            
            if ESP.ShowHeadDot then
                createHeadDot(player)
            end
            
            if ESP.ShowSkeleton then
                createSkeleton(player)
            end
        end
    end
    
    Diagnostics.ActiveESPObjects = #ESPObjects
end

-- Reconnect all events
local function reconnectEvents()
    -- Disconnect all events first
    for _, connection in pairs(eventConnections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    -- Reconnect events
    connectEvents()
end

-- Create the main ESP Gui
local function createESPGui()
    -- Create ScreenGui for ESP
    ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "ESPOverlay"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Use CoreGui if possible for persistence, otherwise use PlayerGui
    local success, result = pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(ScreenGui)
            ScreenGui.Parent = CoreGui
        else
            ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        end
    end)
    
    if not success then
        ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        logError("GuiError", "Failed to use CoreGui, falling back to PlayerGui: " .. tostring(result), false)
    end
    
    -- Create Settings GUI
    SettingsGui = Instance.new("ScreenGui")
    SettingsGui.Name = "AdvancedESPSettings"
    SettingsGui.ResetOnSpawn = false
    SettingsGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Use CoreGui if possible for persistence, otherwise use PlayerGui
    local success, result = pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(SettingsGui)
            SettingsGui.Parent = CoreGui
        else
            SettingsGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        end
    end)
    
    if not success then
        SettingsGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        logError("GuiError", "Failed to use CoreGui for settings, falling back to PlayerGui: " .. tostring(result), false)
    end
    
    createSettingsGui()
    createDiagnosticsPanel()
end

-- Storage for event connections to track them
local eventConnections = {}

-- Connect all events
local function connectEvents()
    -- Clear existing connections
    for _, connection in pairs(eventConnections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    eventConnections = {}
    
    -- Player added
    eventConnections.playerAdded = Players.PlayerAdded:Connect(function(player)
        task.delay(1, function() -- Wait for character to load
            if player ~= LocalPlayer then
                createESPBox(player)
                
                if ESP.ShowChams then
                    createChams(player)
                end
                
                if ESP.ShowTracers then
                    createTracer(player)
                end
                
                if ESP.ShowHeadDot then
                    createHeadDot(player)
                end
                
                if ESP.ShowSkeleton then
                    createSkeleton(player)
                end
            end
        end)
    end)
    
    -- Player removing
    eventConnections.playerRemoving = Players.PlayerRemoving:Connect(function(player)
        removePlayerESP(player)
    end)
    
    -- Character added for each player
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            eventConnections["characterAdded_" .. player.UserId] = player.CharacterAdded:Connect(function(character)
                -- Wait a moment for character to fully load
                task.delay(0.5, function()
                    refreshPlayerESP(player)
                end)
            end)
        end
    end
    
    -- Update connection
    -- We'll establish this separately depending on performance mode
    setupUpdateConnection()
    
    -- Input detection
    eventConnections.inputBegan = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            -- Toggle settings GUI with RightControl
            if input.KeyCode == Enum.KeyCode.RightControl then
                SettingsGui.Enabled = not SettingsGui.Enabled
            end
            
            -- Toggle ESP with F4
            if input.KeyCode == Enum.KeyCode.F4 then
                toggleESP()
            end
            
            -- Toggle diagnostic panel with F5
            if input.KeyCode == Enum.KeyCode.F5 then
                toggleDiagnostics()
            end
            
            -- Force ESP reset with F6
            if input.KeyCode == Enum.KeyCode.F6 then
                resetESP()
            end
        end
    end)
}

-- Setup update connection based on performance mode
local function setupUpdateConnection()
    -- Clear existing update connection
    if eventConnections.update then
        eventConnections.update:Disconnect()
        eventConnections.update = nil
    end
    
    if ESP.PerformanceMode then
        -- Use a less frequent update in performance mode
        eventConnections.update = RunService.Heartbeat:Connect(function()
            -- Only update at the specified refresh rate
            if tick() % ESP.RefreshRate <= 0.01 then
                local startTime = tick()
                updateESP()
                local frameTime = tick() - startTime
                recordFrameTime(frameTime)
                
                -- Auto-detect performance issues
                if frameTime > (1 / ESP.TargetFPS) * 2 then
                    -- If frame time is more than twice the target, log a performance issue
                    logError("PerformanceError", "ESP update taking too long: " .. tostring(frameTime * 1000) .. "ms", true)
                end
            end
        end)
    else
        -- Use RenderStepped for standard mode (more responsive)
        eventConnections.update = RunService:BindToRenderStep("ESPUpdate", Enum.RenderPriority.Camera.Value + 1, function()
            local startTime = tick()
            updateESP()
            local frameTime = tick() - startTime
            recordFrameTime(frameTime)
            
            -- Auto-detect performance issues
            if frameTime > (1 / ESP.TargetFPS) * 2 then
                -- If frame time is more than twice the target, log a performance issue
                logError("PerformanceError", "ESP update taking too long: " .. tostring(frameTime * 1000) .. "ms", true)
            end
        end)
    end
end

-- Remove all ESP for a player
local function removePlayerESP(player)
    -- Remove ESP box
    if ESPObjects[player] then
        ESPObjects[player]:Destroy()
        ESPObjects[player] = nil
    end
    
    -- Remove highlight
    if HighlightedObjects[player] then
        HighlightedObjects[player]:Destroy()
        HighlightedObjects[player] = nil
    end
    
    -- Remove tracer
    if TracerObjects[player] then
        TracerObjects[player]:Destroy()
        TracerObjects[player] = nil
    end
    
    -- Remove head dot
    if HeadDotObjects[player] then
        HeadDotObjects[player]:Destroy()
        HeadDotObjects[player] = nil
    end
    
    -- Remove skeleton
    if SkeletonObjects[player] then
        SkeletonObjects[player]:Destroy()
        SkeletonObjects[player] = nil
    end
    
    -- Remove chams
    if ChamsObjects[player] then
        ChamsObjects[player]:Destroy()
        ChamsObjects[player] = nil
    end
    
    -- Remove any custom connection
    if eventConnections["characterAdded_" .. player.UserId] then
        eventConnections["characterAdded_" .. player.UserId]:Disconnect()
        eventConnections["characterAdded_" .. player.UserId] = nil
    end
    
    Diagnostics.ActiveESPObjects = 0
    for _ in pairs(ESPObjects) do
        Diagnostics.ActiveESPObjects = Diagnostics.ActiveESPObjects + 1
    end
}

-- Refresh ESP for a player
local function refreshPlayerESP(player)
    removePlayerESP(player)
    
    -- Wait a short moment then recreate
    task.delay(0.1, function()
        createESPBox(player)
        
        if ESP.ShowChams then
            createChams(player)
        end
        
        if ESP.ShowTracers then
            createTracer(player)
        end
        
        if ESP.ShowHeadDot then
            createHeadDot(player)
        end
        
        if ESP.ShowSkeleton then
            createSkeleton(player)
        end
    end)
}

-- Create diagnostics panel
local function createDiagnosticsPanel()
    -- Main diagnostics panel
    DiagnosticsPanel = Instance.new("Frame")
    DiagnosticsPanel.Name = "DiagnosticsPanel"
    DiagnosticsPanel.Size = UDim2.new(0, 250, 0, 300)
    DiagnosticsPanel.Position = UDim2.new(0, 10, 0, 10)
    DiagnosticsPanel.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    DiagnosticsPanel.BackgroundTransparency = 0.2
    DiagnosticsPanel.BorderSizePixel = 0
    DiagnosticsPanel.Visible = false
    DiagnosticsPanel.Parent = ScreenGui
    
    -- Add rounded corners
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = DiagnosticsPanel
    
    -- Title bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TitleBar.BackgroundTransparency = 0.2
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = DiagnosticsPanel
    
    -- Title bar corners
    local UICornerTitle = Instance.new("UICorner")
    UICornerTitle.CornerRadius = UDim.new(0, 8)
    UICornerTitle.Parent = TitleBar
    
    -- Title clip to bottom corners
    local TitleBarClip = Instance.new("Frame")
    TitleBarClip.Name = "TitleBarClip"
    TitleBarClip.Size = UDim2.new(1, 0, 0, 10)
    TitleBarClip.Position = UDim2.new(0, 0, 1, -10)
    TitleBarClip.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TitleBarClip.BackgroundTransparency = 0.2
    TitleBarClip.BorderSizePixel = 0
    TitleBarClip.Parent = TitleBar
    
    -- Title text
    local TitleText = Instance.new("TextLabel")
    TitleText.Name = "TitleText"
    TitleText.Size = UDim2.new(1, -30, 1, 0)
    TitleText.Position = UDim2.new(0, 10, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Font = Enum.Font.GothamBold
    TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleText.TextSize = 14
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Text = "ESP Diagnostics"
    TitleText.Parent = TitleBar
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Position = UDim2.new(1, -25, 0, 5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
    CloseButton.BorderSizePixel = 0
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 14
    CloseButton.Text = "X"
    CloseButton.Parent = TitleBar
    
    -- Close button corners
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 4)
    CloseCorner.Parent = CloseButton
    
    -- Close button action
    CloseButton.MouseButton1Click:Connect(function()
        DiagnosticsPanel.Visible = false
    end)
    
    -- Content area
    local Content = Instance.new("ScrollingFrame")
    Content.Name = "Content"
    Content.Size = UDim2.new(1, -20, 1, -40)
    Content.Position = UDim2.new(0, 10, 0, 35)
    Content.BackgroundTransparency = 1
    Content.BorderSizePixel = 0
    Content.ScrollBarThickness = 4
    Content.CanvasSize = UDim2.new(0, 0, 0, 500)
    Content.Parent = DiagnosticsPanel
    
    -- Stats container
    local StatsContainer = Instance.new("Frame")
    StatsContainer.Name = "StatsContainer"
    StatsContainer.Size = UDim2.new(1, 0, 0, 500)
    StatsContainer.BackgroundTransparency = 1
    StatsContainer.Parent = Content
    
    -- Create stats labels
    local labels = {
        {name = "FPSLabel", text = "FPS: --"},
        {name = "ObjectsLabel", text = "Active ESP Objects: --"},
        {name = "UpdateTimeLabel", text = "Update Time: -- ms"},
        {name = "ErrorsLabel", text = "Errors: --"},
        {name = "FixAttemptsLabel", text = "Fix Attempts: --"},
        {name = "MemoryLabel", text = "Memory Usage: -- KB"},
        {name = "StatusLabel", text = "Status: Operational"},
        {name = "OptimizationLabel", text = "Optimization Level: --"}
    }
    
    for i, label in ipairs(labels) do
        local statLabel = Instance.new("TextLabel")
        statLabel.Name = label.name
        statLabel.Size = UDim2.new(1, 0, 0, 25)
        statLabel.Position = UDim2.new(0, 0, 0, (i - 1) * 30)
        statLabel.BackgroundTransparency = 1
        statLabel.Font = Enum.Font.Gotham
        statLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        statLabel.TextSize = 14
        statLabel.TextXAlignment = Enum.TextXAlignment.Left
        statLabel.Text = label.text
        statLabel.Parent = StatsContainer
    end
    
    -- Error log section
    local ErrorLogTitle = Instance.new("TextLabel")
    ErrorLogTitle.Name = "ErrorLogTitle"
    ErrorLogTitle.Size = UDim2.new(1, 0, 0, 25)
    ErrorLogTitle.Position = UDim2.new(0, 0, 0, 240)
    ErrorLogTitle.BackgroundTransparency = 1
    ErrorLogTitle.Font = Enum.Font.GothamBold
    ErrorLogTitle.TextColor3 = Color3.fromRGB(255, 200, 200)
    ErrorLogTitle.TextSize = 14
    ErrorLogTitle.TextXAlignment = Enum.TextXAlignment.Left
    ErrorLogTitle.Text = "Error Log:"
    ErrorLogTitle.Parent = StatsContainer
    
    -- Create error log
    local ErrorLog = Instance.new("TextLabel")
    ErrorLog.Name = "ErrorLog"
    ErrorLog.Size = UDim2.new(1, 0, 0, 200)
    ErrorLog.Position = UDim2.new(0, 0, 0, 270)
    ErrorLog.BackgroundTransparency = 1
    ErrorLog.Font = Enum.Font.Code
    ErrorLog.TextColor3 = Color3.fromRGB(255, 200, 200)
    ErrorLog.TextSize = 12
    ErrorLog.TextXAlignment = Enum.TextXAlignment.Left
    ErrorLog.TextYAlignment = Enum.TextYAlignment.Top
    ErrorLog.Text = "No errors recorded."
    ErrorLog.TextWrapped = true
    ErrorLog.Parent = StatsContainer
    
    -- Action buttons section
    local ActionsTitle = Instance.new("TextLabel")
    ActionsTitle.Name = "ActionsTitle"
    ActionsTitle.Size = UDim2.new(1, 0, 0, 25)
    ActionsTitle.Position = UDim2.new(0, 0, 0, 480)
    ActionsTitle.BackgroundTransparency = 1
    ActionsTitle.Font = Enum.Font.GothamBold
    ActionsTitle.TextColor3 = Color3.fromRGB(200, 255, 200)
    ActionsTitle.TextSize = 14
    ActionsTitle.TextXAlignment = Enum.TextXAlignment.Left
    ActionsTitle.Text = "Actions:"
    ActionsTitle.Parent = StatsContainer
    
    -- Create action buttons
    local actions = {
        {name = "RepairButton", text = "Repair ESP System", action = resetESP},
        {name = "ClearErrorsButton", text = "Clear Error Log", action = function() Diagnostics.Errors = {}; updateDiagnostics() end},
        {name = "OptimizeButton", text = "Optimize Performance", action = optimizePerformance}
    }
    
    for i, actionInfo in ipairs(actions) do
        local actionButton = Instance.new("TextButton")
        actionButton.Name = actionInfo.name
        actionButton.Size = UDim2.new(1, 0, 0, 30)
        actionButton.Position = UDim2.new(0, 0, 0, 510 + (i - 1) * 35)
        actionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        actionButton.BorderSizePixel = 0
        actionButton.Font = Enum.Font.Gotham
        actionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        actionButton.TextSize = 14
        actionButton.Text = actionInfo.text
        actionButton.Parent = StatsContainer
        
        -- Button corners
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 6)
        ButtonCorner.Parent = actionButton
        
        -- Button click action
        actionButton.MouseButton1Click:Connect(actionInfo.action)
    end
    
    -- Update canvas size
    Content.CanvasSize = UDim2.new(0, 0, 0, 650)
    
    -- Make the panel draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = DiagnosticsPanel.Position
        end
    end)
    
    TitleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            DiagnosticsPanel.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Begin updating diagnostics
    task.spawn(function()
        while task.wait(0.5) do -- Update every half second
            updateDiagnostics()
        end
    end)
end

-- Update diagnostics panel
local function updateDiagnostics()
    if not DiagnosticsPanel or not DiagnosticsPanel.Parent then return end
    
    local content = DiagnosticsPanel.Content
    if not content then return end
    
    local stats = content.StatsContainer
    if not stats then return end
    
    -- Update statistics
    local avgFPS = getAverageFPS()
    stats.FPSLabel.Text = "FPS: " .. string.format("%.1f", avgFPS)
    
    -- Color code FPS
    if avgFPS > 45 then
        stats.FPSLabel.TextColor3 = Color3.fromRGB(100, 255, 100) -- Green
    elseif avgFPS > 30 then
        stats.FPSLabel.TextColor3 = Color3.fromRGB(255, 255, 100) -- Yellow
    else
        stats.FPSLabel.TextColor3 = Color3.fromRGB(255, 100, 100) -- Red
    end
    
    -- Count active objects
    Diagnostics.ActiveESPObjects = 0
    for _ in pairs(ESPObjects) do
        Diagnostics.ActiveESPObjects = Diagnostics.ActiveESPObjects + 1
    end
    
    stats.ObjectsLabel.Text = "Active ESP Objects: " .. Diagnostics.ActiveESPObjects
    
    -- Update times
    local avgUpdateTime = 0
    if #Diagnostics.FrameUpdateTimes > 0 then
        local sum = 0
        for _, time in ipairs(Diagnostics.FrameUpdateTimes) do
            sum = sum + time
        end
        avgUpdateTime = sum / #Diagnostics.FrameUpdateTimes
    end
    
    stats.UpdateTimeLabel.Text = "Update Time: " .. string.format("%.2f", avgUpdateTime * 1000) .. " ms"
    
    -- Color code update time
    if avgUpdateTime < 0.01 then -- Less than 10ms
        stats.UpdateTimeLabel.TextColor3 = Color3.fromRGB(100, 255, 100) -- Green
    elseif avgUpdateTime < 0.016 then -- Less than 16ms (60 FPS)
        stats.UpdateTimeLabel.TextColor3 = Color3.fromRGB(255, 255, 100) -- Yellow
    else
        stats.UpdateTimeLabel.TextColor3 = Color3.fromRGB(255, 100, 100) -- Red
    end
    
    -- Error count
    stats.ErrorsLabel.Text = "Errors: " .. Diagnostics.ErrorCount
    
    -- Fix attempts
    stats.FixAttemptsLabel.Text = "Fix Attempts: " .. Diagnostics.FixAttempts
    
    -- Memory usage estimate (very rough)
    local memUsage = Diagnostics.ActiveESPObjects * 10 -- 10 KB per ESP object (estimate)
    stats.MemoryLabel.Text = "Memory Usage: ~" .. memUsage .. " KB"
    
    -- Status
    local status = "Operational"
    if Diagnostics.ErrorCount > 10 then
        status = "Degraded"
        stats.StatusLabel.TextColor3 = Color3.fromRGB(255, 200, 0) -- Yellow
    elseif Diagnostics.ErrorCount > 20 then
        status = "Critical"
        stats.StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100) -- Red
    else
        stats.StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100) -- Green
    end
    
    stats.StatusLabel.Text = "Status: " .. status
    
    -- Optimization level
    local optLevels = {"Low", "Medium", "High"}
    stats.OptimizationLabel.Text = "Optimization Level: " .. optLevels[ESP.OptimizationLevel]
    
    -- Update error log
    local errorLog = ""
    for i = #Diagnostics.Errors, 1, -1 do
        local err = Diagnostics.Errors[i]
        local timeStr = os.date("%H:%M:%S", err.Time)
        local severity = err.Critical and "CRITICAL" or "WARNING"
        errorLog = errorLog .. "[" .. timeStr .. "] " .. severity .. ": " .. err.Type .. " - " .. err.Details .. "\n"
        
        -- Only show the last 5 errors
        if #Diagnostics.Errors - i >= 5 then
            break
        end
    end
    
    if errorLog == "" then
        errorLog = "No errors recorded."
    end
    
    stats.ErrorLog.Text = errorLog
end

-- Toggle diagnostics panel visibility
local function toggleDiagnostics()
    if DiagnosticsPanel then
        DiagnosticsPanel.Visible = not DiagnosticsPanel.Visible
        
        -- Update immediately if becoming visible
        if DiagnosticsPanel.Visible then
            updateDiagnostics()
        end
    end
end

-- Optimize performance based on current stats
local function optimizePerformance()
    local avgFPS = getAverageFPS()
    local avgUpdateTime = 0
    
    if #Diagnostics.FrameUpdateTimes > 0 then
        local sum = 0
        for _, time in ipairs(Diagnostics.FrameUpdateTimes) do
            sum = sum + time
        end
        avgUpdateTime = sum / #Diagnostics.FrameUpdateTimes
    end
    
    -- If FPS is low or update time is high, optimize
    if avgFPS < 30 or avgUpdateTime > 0.016 then
        -- Disable features based on severity
        if avgFPS < 15 or avgUpdateTime > 0.05 then
            -- Severe performance issues - disable most features
            ESP.ShowChams = false
            ESP.ShowSkeleton = false
            ESP.ShowTracers = false
            ESP.BoxStyle = 1
            ESP.ShowHeadDot = false
            ESP.VisibilityCheck = false
            ESP.PredictMovement = false
            ESP.RainbowMode = false
            ESP.PerformanceMode = true
            ESP.RefreshRate = 0.2
            ESP.OptimizationLevel = 3
        elseif avgFPS < 25 or avgUpdateTime > 0.025 then
            -- Moderate performance issues - disable some features
            ESP.ShowChams = false
            ESP.ShowSkeleton = false
            ESP.BoxStyle = 1
            ESP.VisibilityCheck = false
            ESP.PredictMovement = false
            ESP.RainbowMode = false
            ESP.PerformanceMode = true
            ESP.RefreshRate = 0.1
            ESP.OptimizationLevel = 2
        else
            -- Minor performance issues - disable heavy features
            ESP.ShowChams = false
            ESP.ShowSkeleton = false
            ESP.VisibilityCheck = false
            ESP.PredictMovement = false
            ESP.PerformanceMode = false
            ESP.OptimizationLevel = 2
        end
        
        -- Apply changes
        clearESPObjects()
        setupUpdateConnection()
        rebuildESPObjects()
        
        -- Update UI to reflect changes
        updateSettingsUI()
        
        if ESP.DebugMode then
            print("[ESP OPTIMIZE] Performance optimized. New level: " .. ESP.OptimizationLevel)
        end
    else
        -- Performance is good, no need to optimize
        if ESP.DebugMode then
            print("[ESP OPTIMIZE] Performance is already good. FPS: " .. string.format("%.1f", avgFPS))
        end
    end
}

-- Create settings GUI
local function createSettingsGui()
    -- Main frame for settings
    MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 300, 0, 400)
    MainFrame.Position = UDim2.new(0.85, -150, 0.5, -200)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BackgroundTransparency = 0.1
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    MainFrame.Draggable = true
    MainFrame.Parent = SettingsGui
    
    -- Add rounded corners
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame
    
    -- Title bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 40)
    TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TitleBar.BackgroundTransparency = 0.1
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    -- Title bar rounded corners
    local UICornerTitle = Instance.new("UICorner")
    UICornerTitle.CornerRadius = UDim.new(0, 8)
    UICornerTitle.Parent = TitleBar
    
    -- Title clip to bottom corners
    local TitleBarClip = Instance.new("Frame")
    TitleBarClip.Name = "TitleBarClip"
    TitleBarClip.Size = UDim2.new(1, 0, 0, 10)
    TitleBarClip.Position = UDim2.new(0, 0, 1, -10)
    TitleBarClip.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TitleBarClip.BackgroundTransparency = 0.1
    TitleBarClip.BorderSizePixel = 0
    TitleBarClip.Parent = TitleBar
    
    -- Title text
    local TitleText = Instance.new("TextLabel")
    TitleText.Name = "TitleText"
    TitleText.Size = UDim2.new(1, -80, 1, 0)
    TitleText.Position = UDim2.new(0, 10, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Font = Enum.Font.GothamBold
    TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleText.TextSize = 16
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Text = "Advanced ESP Settings"
    TitleText.Parent = TitleBar
    
    -- Tabs for different settings
    local TabButtons = Instance.new("Frame")
    TabButtons.Name = "TabButtons"
    TabButtons.Size = UDim2.new(1, 0, 0, 30)
    TabButtons.Position = UDim2.new(0, 0, 0, 40)
    TabButtons.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButtons.BackgroundTransparency = 0.2
    TabButtons.BorderSizePixel = 0
    TabButtons.Parent = MainFrame
    
    -- Tab button creation function
    local function createTabButton(name, position, active)
        local button = Instance.new("TextButton")
        button.Name = name .. "Button"
        button.Size = UDim2.new(0.25, 0, 1, 0)
        button.Position = UDim2.new(position, 0, 0, 0)
        button.BackgroundTransparency = active and 0.5 or 0.9
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        button.BorderSizePixel = 0
        button.Font = Enum.Font.Gotham
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 14
        button.Text = name
        button.Parent = TabButtons
        
        return button
    end
    
    -- Create tab buttons
    local mainTab = createTabButton("Main", 0, true)
    local visualTab = createTabButton("Visual", 0.25, false)
    local advancedTab = createTabButton("Advanced", 0.5, false)
    local systemTab = createTabButton("System", 0.75, false)
    
    -- Create tab panels
    local function createTabPanel(name, visible)
        local panel = Instance.new("ScrollingFrame")
        panel.Name = name .. "Tab"
        panel.Size = UDim2.new(1, -20, 1, -80)
        panel.Position = UDim2.new(0, 10, 0, 75)
        panel.BackgroundTransparency = 1
        panel.BorderSizePixel = 0
        panel.ScrollBarThickness = 6
        panel.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
        panel.CanvasSize = UDim2.new(0, 0, 2, 0) -- Will adjust based on content
        panel.Visible = visible
        panel.Parent = MainFrame
        
        return panel
    end
    
    -- Create tab panels
    local mainPanel = createTabPanel("Main", true)
    local visualPanel = createTabPanel("Visual", false)
    local advancedPanel = createTabPanel("Advanced", false)
    local systemPanel = createTabPanel("System", false)
    
    -- Tab switching function
    local function switchToTab(tabName)
        -- Hide all panels
        mainPanel.Visible = false
        visualPanel.Visible = false
        advancedPanel.Visible = false
        systemPanel.Visible = false
        
        -- Reset all button transparency
        mainTab.BackgroundTransparency = 0.9
        visualTab.BackgroundTransparency = 0.9
        advancedTab.BackgroundTransparency = 0.9
        systemTab.BackgroundTransparency = 0.9
        
        -- Show selected panel and highlight button
        if tabName == "Main" then
            mainPanel.Visible = true
            mainTab.BackgroundTransparency = 0.5
        elseif tabName == "Visual" then
            visualPanel.Visible = true
            visualTab.BackgroundTransparency = 0.5
        elseif tabName == "Advanced" then
            advancedPanel.Visible = true
            advancedTab.BackgroundTransparency = 0.5
        elseif tabName == "System" then
            systemPanel.Visible = true
            systemTab.BackgroundTransparency = 0.5
        end
    end
    
    -- Connect tab buttons
    mainTab.MouseButton1Click:Connect(function() switchToTab("Main") end)
    visualTab.MouseButton1Click:Connect(function() switchToTab("Visual") end)
    advancedTab.MouseButton1Click:Connect(function() switchToTab("Advanced") end)
    systemTab.MouseButton1Click:Connect(function() switchToTab("System") end)
    
    -- Minimize button
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
    MinimizeButton.Position = UDim2.new(1, -70, 0, 5)
    MinimizeButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.Font = Enum.Font.GothamBold
    MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    MinimizeButton.TextSize = 18
    MinimizeButton.Text = "_"
    MinimizeButton.Parent = TitleBar
    
    -- Minimize button rounded corners
    local UICornerMin = Instance.new("UICorner")
    UICornerMin.CornerRadius = UDim.new(0, 6)
    UICornerMin.Parent = MinimizeButton
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -35, 0, 5)
    CloseButton.BackgroundColor3 = Color3.fromRGB(200, 40, 40)
    CloseButton.BorderSizePixel = 0
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 18
    CloseButton.Text = "X"
    CloseButton.Parent = TitleBar
    
    -- Close button rounded corners
    local UICornerClose = Instance.new("UICorner")
    UICornerClose.CornerRadius = UDim.new(0, 6)
    UICornerClose.Parent = CloseButton
    
    -- Create UI controls for each tab
    createMainTabControls(mainPanel)
    createVisualTabControls(visualPanel)
    createAdvancedTabControls(advancedPanel)
    createSystemTabControls(systemPanel)
    
    -- Toggle visibility of settings GUI
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            local targetSize = UDim2.new(0, 300, 0, 40)
            local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3), {Size = targetSize})
            tween:Play()
            mainPanel.Visible = false
            visualPanel.Visible = false
            advancedPanel.Visible = false
            systemPanel.Visible = false
            TabButtons.Visible = false
            MinimizeButton.Text = "+"
        else
            local targetSize = UDim2.new(0, 300, 0, 400)
            local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3), {Size = targetSize})
            tween:Play()
            TabButtons.Visible = true
            switchToTab("Main")
            MinimizeButton.Text = "_"
        end
    end)
    
    -- Close settings GUI
    CloseButton.MouseButton1Click:Connect(function()
        SettingsGui.Enabled = false
    end)
}

-- Create Section in a tab
local function createSection(title, parent, posY)
    local section = Instance.new("Frame")
    section.Name = title .. "Section"
    section.Size = UDim2.new(1, 0, 0, 30)
    section.Position = UDim2.new(0, 0, 0, posY)
    section.BackgroundTransparency = 1
    section.Parent = parent
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Name = "Title"
    sectionTitle.Size = UDim2.new(1, 0, 0, 30)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Font = Enum.Font.GothamSemibold
    sectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionTitle.TextSize = 14
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Text = title
    sectionTitle.Parent = section
    
    return section, posY + 35
end

-- Create toggle control
local function createToggle(parent, posY, text, initialValue, callback)
    local toggle = Instance.new("Frame")
    toggle.Name = text .. "Toggle"
    toggle.Size = UDim2.new(1, 0, 0, 30)
    toggle.Position = UDim2.new(0, 0, 0, posY)
    toggle.BackgroundTransparency = 1
    toggle.Parent = parent
    
    local toggleText = Instance.new("TextLabel")
    toggleText.Name = "Text"
    toggleText.Size = UDim2.new(1, -60, 1, 0)
    toggleText.BackgroundTransparency = 1
    toggleText.Font = Enum.Font.Gotham
    toggleText.TextColor3 = Color3.fromRGB(200, 200, 200)
    toggleText.TextSize = 14
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Text = text
    toggleText.Parent = toggle
    
    local toggleButton = Instance.new("Frame")
    toggleButton.Name = "Button"
    toggleButton.Size = UDim2.new(0, 44, 0, 22)
    toggleButton.Position = UDim2.new(1, -50, 0, 4)
    toggleButton.BackgroundColor3 = initialValue and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(100, 100, 100)
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = toggle
    
    local toggleUICorner = Instance.new("UICorner")
    toggleUICorner.CornerRadius = UDim.new(1, 0)
    toggleUICorner.Parent = toggleButton
    
    local toggleCircle = Instance.new("Frame")
    toggleCircle.Name = "Circle"
    toggleCircle.Size = UDim2.new(0, 18, 0, 18)
    toggleCircle.Position = UDim2.new(initialValue and 1 or 0, initialValue and -20 or 2, 0, 2)
    toggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleCircle.BorderSizePixel = 0
    toggleCircle.Parent = toggleButton
    
    local circleUICorner = Instance.new("UICorner")
    circleUICorner.CornerRadius = UDim.new(1, 0)
    circleUICorner.Parent = toggleCircle
    
    local value = initialValue
    
    local function updateToggle()
        value = not value
        callback(value)
        
        local targetPos = value and UDim2.new(1, -20, 0, 2) or UDim2.new(0, 2, 0, 2)
        local targetColor = value and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(100, 100, 100)
        
        local posTween = TweenService:Create(toggleCircle, TweenInfo.new(0.2), {Position = targetPos})
        local colorTween = TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = targetColor})
        
        posTween:Play()
        colorTween:Play()
    end
    
    toggleButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateToggle()
        end
    end)
    
    return toggle, posY + 35, function() return value end, function(newValue)
        if value ~= newValue then
            updateToggle()
        end
    end
end

-- Create slider control
local function createSlider(parent, posY, text, min, max, initialValue, callback)
    local slider = Instance.new("Frame")
    slider.Name = text .. "Slider"
    slider.Size = UDim2.new(1, 0, 0, 50)
    slider.Position = UDim2.new(0, 0, 0, posY)
    slider.BackgroundTransparency = 1
    slider.Parent = parent
    
    local sliderText = Instance.new("TextLabel")
    sliderText.Name = "Text"
    sliderText.Size = UDim2.new(1, -50, 0, 20)
    sliderText.BackgroundTransparency = 1
    sliderText.Font = Enum.Font.Gotham
    sliderText.TextColor3 = Color3.fromRGB(200, 200, 200)
    sliderText.TextSize = 14
    sliderText.TextXAlignment = Enum.TextXAlignment.Left
    sliderText.Text = text
    sliderText.Parent = slider
    
    local valueText = Instance.new("TextLabel")
    valueText.Name = "Value"
    valueText.Size = UDim2.new(0, 45, 0, 20)
    valueText.Position = UDim2.new(1, -45, 0, 0)
    valueText.BackgroundTransparency = 1
    valueText.Font = Enum.Font.Gotham
    valueText.TextColor3 = Color3.fromRGB(200, 200, 200)
    valueText.TextSize = 14
    valueText.TextXAlignment = Enum.TextXAlignment.Right
    valueText.Text = tostring(initialValue)
    valueText.Parent = slider
    
    local sliderBG = Instance.new("Frame")
    sliderBG.Name = "Background"
    sliderBG.Size = UDim2.new(1, 0, 0, 10)
    sliderBG.Position = UDim2.new(0, 0, 0, 30)
    sliderBG.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    sliderBG.BorderSizePixel = 0
    sliderBG.Parent = slider
    
    local sliderUICorner = Instance.new("UICorner")
    sliderUICorner.CornerRadius = UDim.new(0, 5)
    sliderUICorner.Parent = sliderBG
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    local fillPercent = (initialValue - min) / (max - min)
    sliderFill.Size = UDim2.new(fillPercent, 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBG
    
    local fillUICorner = Instance.new("UICorner")
    fillUICorner.CornerRadius = UDim.new(0, 5)
    fillUICorner.Parent = sliderFill
    
    local sliderKnob = Instance.new("Frame")
    sliderKnob.Name = "Knob"
    sliderKnob.Size = UDim2.new(0, 16, 0, 16)
    sliderKnob.Position = UDim2.new(fillPercent, -8, 0.5, -8)
    sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBG
    
    local knobUICorner = Instance.new("UICorner")
    knobUICorner.CornerRadius = UDim.new(1, 0)
    knobUICorner.Parent = sliderKnob
    
    local value = initialValue
    
    local function updateSlider(input)
        local sliderPosition = math.clamp((input.Position.X - sliderBG.AbsolutePosition.X) / sliderBG.AbsoluteSize.X, 0, 1)
        value = min + (sliderPosition * (max - min))
        
        if min == math.floor(min) and max == math.floor(max) then
            value = math.floor(value + 0.5) -- Round to nearest integer
        else
            -- Round to 2 decimal places
            value = math.floor(value * 100 + 0.5) / 100
        end
        
        sliderFill.Size = UDim2.new(sliderPosition, 0, 1, 0)
        sliderKnob.Position = UDim2.new(sliderPosition, -8, 0.5, -8)
        valueText.Text = tostring(value)
        
        callback(value)
    end
    
    local dragging = false
    
    sliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
        end
    end)
    
    sliderBG.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    return slider, posY + 55, function() return value end, function(newValue)
        value = math.clamp(newValue, min, max)
        local sliderPosition = (value - min) / (max - min)
        
        sliderFill.Size = UDim2.new(sliderPosition, 0, 1, 0)
        sliderKnob.Position = UDim2.new(sliderPosition, -8, 0.5, -8)
        valueText.Text = tostring(value)
        
        callback(value)
    end
end

-- Create color picker control
local function createColorPicker(parent, posY, text, initialColor, callback)
    local colorPicker = Instance.new("Frame")
    colorPicker.Name = text .. "ColorPicker"
    colorPicker.Size = UDim2.new(1, 0, 0, 130)
    colorPicker.Position = UDim2.new(0, 0, 0, posY)
    colorPicker.BackgroundTransparency = 1
    colorPicker.Parent = parent
    
    local colorText = Instance.new("TextLabel")
    colorText.Name = "Text"
    colorText.Size = UDim2.new(1, -60, 0, 20)
    colorText.BackgroundTransparency = 1
    colorText.Font = Enum.Font.Gotham
    colorText.TextColor3 = Color3.fromRGB(200, 200, 200)
    colorText.TextSize = 14
    colorText.TextXAlignment = Enum.TextXAlignment.Left
    colorText.Text = text
    colorText.Parent = colorPicker
    
    local colorPreview = Instance.new("Frame")
    colorPreview.Name = "Preview"
    colorPreview.Size = UDim2.new(0, 50, 0, 20)
    colorPreview.Position = UDim2.new(1, -55, 0, 0)
    colorPreview.BackgroundColor3 = initialColor
    colorPreview.BorderSizePixel = 0
    colorPreview.Parent = colorPicker
    
    local previewUICorner = Instance.new("UICorner")
    previewUICorner.CornerRadius = UDim.new(0, 4)
    previewUICorner.Parent = colorPreview
    
    -- RGB Sliders
    local rSlider, rPosY, getRed, setRed = createSlider(colorPicker, 25, "R", 0, 255, initialColor.R * 255, function(value)
        local color = Color3.fromRGB(value, getGreen(), getBlue())
        colorPreview.BackgroundColor3 = color
        callback(color)
    end)
    
    local gSlider, gPosY, getGreen, setGreen = createSlider(colorPicker, rPosY, "G", 0, 255, initialColor.G * 255, function(value)
        local color = Color3.fromRGB(getRed(), value, getBlue())
        colorPreview.BackgroundColor3 = color
        callback(color)
    end)
    
    local bSlider, bPosY, getBlue, setBlue = createSlider(colorPicker, gPosY, "B", 0, 255, initialColor.B * 255, function(value)
        local color = Color3.fromRGB(getRed(), getGreen(), value)
        colorPreview.BackgroundColor3 = color
        callback(color)
    end)
    
    colorPicker.Size = UDim2.new(1, 0, 0, bPosY)
    
    return colorPicker, bPosY, function() 
        return Color3.fromRGB(getRed(), getGreen(), getBlue()) 
    end, function(newColor)
        setRed(newColor.R * 255)
        setGreen(newColor.G * 255)
        setBlue(newColor.B * 255)
        colorPreview.BackgroundColor3 = newColor
    end
end

-- Create dropdown control
local function createDropdown(parent, posY, text, options, initialValue, callback)
    local dropdown = Instance.new("Frame")
    dropdown.Name = text .. "Dropdown"
    dropdown.Size = UDim2.new(1, 0, 0, 55)
    dropdown.Position = UDim2.new(0, 0, 0, posY)
    dropdown.BackgroundTransparency = 1
    dropdown.Parent = parent
    
    local dropdownText = Instance.new("TextLabel")
    dropdownText.Name = "Text"
    dropdownText.Size = UDim2.new(1, 0, 0, 20)
    dropdownText.BackgroundTransparency = 1
    dropdownText.Font = Enum.Font.Gotham
    dropdownText.TextColor3 = Color3.fromRGB(200, 200, 200)
    dropdownText.TextSize = 14
    dropdownText.TextXAlignment = Enum.TextXAlignment.Left
    dropdownText.Text = text
    dropdownText.Parent = dropdown
    
    local selectedIndex = 1
    for i, option in ipairs(options) do
        if option == initialValue then
            selectedIndex = i
            break
        end
    end
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "Button"
    dropdownButton.Size = UDim2.new(1, 0, 0, 30)
    dropdownButton.Position = UDim2.new(0, 0, 0, 25)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    dropdownButton.TextSize = 14
    dropdownButton.Text = options[selectedIndex]
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.Parent = dropdown
    
    local paddingLeft = Instance.new("UIPadding")
    paddingLeft.PaddingLeft = UDim.new(0, 10)
    paddingLeft.Parent = dropdownButton
    
    local dropdownUICorner = Instance.new("UICorner")
    dropdownUICorner.CornerRadius = UDim.new(0, 4)
    dropdownUICorner.Parent = dropdownButton
    
    local arrowIcon = Instance.new("TextLabel")
    arrowIcon.Name = "Arrow"
    arrowIcon.Size = UDim2.new(0, 20, 0, 20)
    arrowIcon.Position = UDim2.new(1, -25, 0, 5)
    arrowIcon.BackgroundTransparency = 1
    arrowIcon.Font = Enum.Font.GothamBold
    arrowIcon.TextColor3 = Color3.fromRGB(200, 200, 200)
    arrowIcon.TextSize = 14
    arrowIcon.Text = "▼"
    arrowIcon.Parent = dropdownButton
    
    local dropdownMenu = Instance.new("Frame")
    dropdownMenu.Name = "Menu"
    dropdownMenu.Size = UDim2.new(1, 0, 0, #options * 30)
    dropdownMenu.Position = UDim2.new(0, 0, 1, 5)
    dropdownMenu.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    dropdownMenu.BorderSizePixel = 0
    dropdownMenu.Visible = false
    dropdownMenu.ZIndex = 10
    dropdownMenu.Parent = dropdown
    
    local menuUICorner = Instance.new("UICorner")
    menuUICorner.CornerRadius = UDim.new(0, 4)
    menuUICorner.Parent = dropdownMenu
    
    local optionButtons = {}
    
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = "Option" .. i
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.Position = UDim2.new(0, 0, 0, (i - 1) * 30)
        optionButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        optionButton.BackgroundTransparency = 0.8
        optionButton.BorderSizePixel = 0
        optionButton.Font = Enum.Font.Gotham
        optionButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        optionButton.TextSize = 14
        optionButton.Text = option
        optionButton.TextXAlignment = Enum.TextXAlignment.Left
        optionButton.ZIndex = 11
        optionButton.Parent = dropdownMenu
        
        local optionPadding = Instance.new("UIPadding")
        optionPadding.PaddingLeft = UDim.new(0, 10)
        optionPadding.Parent = optionButton
        
        optionButton.MouseButton1Click:Connect(function()
            dropdownButton.Text = option
            dropdownMenu.Visible = false
            arrowIcon.Text = "▼"
            selectedIndex = i
            callback(option, i)
        end)
        
        -- Add hover effect
        optionButton.MouseEnter:Connect(function()
            optionButton.BackgroundTransparency = 0.5
        end)
        
        optionButton.MouseLeave:Connect(function()
            optionButton.BackgroundTransparency = 0.8
        end)
        
        table.insert(optionButtons, optionButton)
    end
    
    dropdownButton.MouseButton1Click:Connect(function()
        dropdownMenu.Visible = not dropdownMenu.Visible
        arrowIcon.Text = dropdownMenu.Visible and "▲" or "▼"
    end)
    
    return dropdown, posY + 60, function() return options[selectedIndex], selectedIndex end, function(newValue)
        for i, option in ipairs(options) do
            if option == newValue then
                dropdownButton.Text = option
                selectedIndex = i
                callback(option, i)
                break
            end
        end
    end
end

-- Create text input
local function createTextInput(parent, posY, text, initialValue, callback)
    local textInput = Instance.new("Frame")
    textInput.Name = text .. "TextInput"
    textInput.Size = UDim2.new(1, 0, 0, 55)
    textInput.Position = UDim2.new(0, 0, 0, posY)
    textInput.BackgroundTransparency = 1
    textInput.Parent = parent
    
    local inputText = Instance.new("TextLabel")
    inputText.Name = "Text"
    inputText.Size = UDim2.new(1, 0, 0, 20)
    inputText.BackgroundTransparency = 1
    inputText.Font = Enum.Font.Gotham
    inputText.TextColor3 = Color3.fromRGB(200, 200, 200)
    inputText.TextSize = 14
    inputText.TextXAlignment = Enum.TextXAlignment.Left
    inputText.Text = text
    inputText.Parent = textInput
    
    local inputBox = Instance.new("TextBox")
    inputBox.Name = "Input"
    inputBox.Size = UDim2.new(1, 0, 0, 30)
    inputBox.Position = UDim2.new(0, 0, 0, 25)
    inputBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    inputBox.BorderSizePixel = 0
    inputBox.Font = Enum.Font.Gotham
    inputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    inputBox.TextSize = 14
    inputBox.Text = initialValue
    inputBox.PlaceholderText = "Enter text..."
    inputBox.ClearTextOnFocus = false
    inputBox.Parent = textInput
    
    local inputPadding = Instance.new("UIPadding")
    inputPadding.PaddingLeft = UDim.new(0, 10)
    inputPadding.Parent = inputBox
    
    local inputUICorner = Instance.new("UICorner")
    inputUICorner.CornerRadius = UDim.new(0, 4)
    inputUICorner.Parent = inputBox
    
    inputBox.FocusLost:Connect(function(enterPressed)
        callback(inputBox.Text)
    end)
    
    return textInput, posY + 60, function() return inputBox.Text end, function(newValue)
        inputBox.Text = newValue
    end
end

-- Create button
local function createButton(parent, posY, text, buttonColor, callback)
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Position = UDim2.new(0, 0, 0, posY)
    button.BackgroundColor3 = buttonColor or Color3.fromRGB(0, 120, 215)
    button.BorderSizePixel = 0
    button.Font = Enum.Font.GothamBold
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 16
    button.Text = text
    button.Parent = parent
    
    local buttonUICorner = Instance.new("UICorner")
    buttonUICorner.CornerRadius = UDim.new(0, 4)
    buttonUICorner.Parent = button
    
    button.MouseButton1Click:Connect(callback)
    
    -- Add hover effect
    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(
            math.min(buttonColor.R * 255 + 20, 255),
            math.min(buttonColor.G * 255 + 20, 255),
            math.min(buttonColor.B * 255 + 20, 255)
        )
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = buttonColor
    end)
    
    return button, posY + 50
end

-- Fill content for the Main tab
local function createMainTabControls(parent)
    local posY = 0
    
    -- General section
    local generalSection, posY = createSection("General", parent, posY)
    
    -- ESP Enabled toggle
    local enabledToggle, posY, getEnabled, setEnabled = createToggle(
        parent, posY, "ESP Enabled", ESP.Enabled, 
        function(value) 
            ESP.Enabled = value
            for _, box in pairs(ESPObjects) do
                box.Visible = value
            end
        end
    )
    
    -- Team Check toggle
    local teamToggle, posY, getTeamCheck, setTeamCheck = createToggle(
        parent, posY, "Team Check", ESP.TeamCheck,
        function(value) ESP.TeamCheck = value end
    )
    
    -- Use Team Colors toggle
    local useTeamColors, posY, getUseTeamColors, setUseTeamColors = createToggle(
        parent, posY, "Use Team Colors", ESP.UseTeamColors,
        function(value) ESP.UseTeamColors = value end
    )
    
    -- Elements section
    local elementsSection, posY = createSection("Elements", parent, posY)
    
    -- Show Players toggle
    local showPlayers, posY, getShowPlayers, setShowPlayers = createToggle(
        parent, posY, "Show Players", ESP.ShowPlayers,
        function(value) 
            ESP.ShowPlayers = value
            refreshAllESP()
        end
    )
    
    -- Show Health Bar toggle
    local healthBarToggle, posY, getHealthBar, setHealthBar = createToggle(
        parent, posY, "Show Health Bar", ESP.ShowHealthBar,
        function(value) 
            ESP.ShowHealthBar = value
            refreshHealthBars()
        end
    )
    
    -- Show Distance toggle
    local distanceToggle, posY, getDistance, setDistance = createToggle(
        parent, posY, "Show Distance", ESP.ShowDistance,
        function(value) 
            ESP.ShowDistance = value
            refreshLabels()
        end
    )
    
    -- Show Weapon toggle (if game has weapons)
    local weaponToggle, posY, getWeapon, setWeapon = createToggle(
        parent, posY, "Show Weapon (if available)", ESP.ShowWeapon,
        function(value) 
            ESP.ShowWeapon = value
            refreshLabels()
        end
    )
    
    -- Show Head Dot toggle
    local headDotToggle, posY, getHeadDot, setHeadDot = createToggle(
        parent, posY, "Show Head Dot", ESP.ShowHeadDot,
        function(value) 
            ESP.ShowHeadDot = value
            refreshHeadDots()
        end
    )
    
    -- Box Style dropdown
    local boxStyle, posY, getBoxStyle, setBoxStyle = createDropdown(
        parent, posY, "Box Style",
        {"Regular", "3D", "Corner"},
        ESP.BoxStyle == 1 and "Regular" or (ESP.BoxStyle == 2 and "3D" or "Corner"),
        function(value, index) 
            ESP.BoxStyle = index
            refreshBoxStyles()
        end
    )
    
    -- ESP Color picker
    local colorPicker, posY, getColor, setColor = createColorPicker(
        parent, posY, "ESP Color", ESP.BoxColor,
        function(color) 
            ESP.BoxColor = color
            updateESPColors(color)
        end
    )
    
    -- Rainbow Mode toggle
    local rainbowToggle, posY, getRainbow, setRainbow = createToggle(
        parent, posY, "Rainbow Mode", ESP.RainbowMode,
        function(value) ESP.RainbowMode = value end
    )
    
    -- Actions section
    local actionsSection, posY = createSection("Actions", parent, posY)
    
    -- Reset button
    local resetButton, posY = createButton(
        parent, posY, "Reset ESP", Color3.fromRGB(200, 40, 40),
        function() resetESP() end
    )
    
    -- Update canvas size
    parent.CanvasSize = UDim2.new(0, 0, 0, posY + 20)
    
    -- Store getters and setters
    return {
        getEnabled = getEnabled,
        setEnabled = setEnabled,
        getTeamCheck = getTeamCheck,
        setTeamCheck = setTeamCheck,
        getUseTeamColors = getUseTeamColors,
        setUseTeamColors = setUseTeamColors,
        getShowPlayers = getShowPlayers,
        setShowPlayers = setShowPlayers,
        getHealthBar = getHealthBar,
        setHealthBar = setHealthBar,
        getDistance = getDistance,
        setDistance = setDistance,
        getWeapon = getWeapon,
        setWeapon = setWeapon,
        getHeadDot = getHeadDot,
        setHeadDot = setHeadDot,
        getBoxStyle = getBoxStyle,
        setBoxStyle = setBoxStyle,
        getColor = getColor,
        setColor = setColor,
        getRainbow = getRainbow,
        setRainbow = setRainbow
    }
end

-- Fill content for the Visual tab
local function createVisualTabControls(parent)
    local posY = 0
    
    -- Visuals section
    local visualsSection, posY = createSection("Visual Elements", parent, posY)
    
    -- Show Tracers toggle
    local tracersToggle, posY, getTracers, setTracers = createToggle(
        parent, posY, "Show Tracers", ESP.ShowTracers,
        function(value) 
            ESP.ShowTracers = value
            refreshTracers()
        end
    )
    
    -- Tracer Origin dropdown
    local tracerOrigin, posY, getTracerOrigin, setTracerOrigin = createDropdown(
        parent, posY, "Tracer Origin",
        {"Top", "Center", "Bottom"},
        ESP.TracerOrigin == 1 and "Top" or (ESP.TracerOrigin == 2 and "Center" or "Bottom"),
        function(value, index) 
            ESP.TracerOrigin = index
            refreshTracers()
        end
    )
    
    -- Show Skeleton toggle
    local skeletonToggle, posY, getSkeleton, setSkeleton = createToggle(
        parent, posY, "Show Skeleton", ESP.ShowSkeleton,
        function(value) 
            ESP.ShowSkeleton = value
            refreshSkeleton()
        end
    )
    
    -- Show Chams toggle
    local chamsToggle, posY, getChams, setChams = createToggle(
        parent, posY, "Show Chams", ESP.ShowChams,
        function(value) 
            ESP.ShowChams = value
            refreshChams()
        end
    )
    
    -- Chams Transparency slider
    local chamsTransparency, posY, getChamsTransparency, setChamsTransparency = createSlider(
        parent, posY, "Chams Transparency", 0, 1, ESP.ChamsTransparency,
        function(value) 
            ESP.ChamsTransparency = value
            updateChamsTransparency(value)
        end
    )
    
    -- Head Dot Size slider
    local headDotSize, posY, getHeadDotSize, setHeadDotSize = createSlider(
        parent, posY, "Head Dot Size", 1, 10, ESP.HeadDotSize,
        function(value) 
            ESP.HeadDotSize = value
            updateHeadDotSize(value)
        end
    )
    
    -- Appearance section
    local appearanceSection, posY = createSection("Appearance", parent, posY)
    
    -- Box Thickness slider
    local boxThickness, posY, getBoxThickness, setBoxThickness = createSlider(
        parent, posY, "Box Thickness", 1, 5, ESP.BoxThickness,
        function(value) 
            ESP.BoxThickness = value
            updateBoxThickness(value)
        end
    )
    
    -- Box Transparency slider
    local boxTransparency, posY, getBoxTransparency, setBoxTransparency = createSlider(
        parent, posY, "Box Transparency", 0, 1, ESP.BoxTransparency,
        function(value) 
            ESP.BoxTransparency = value
            updateBoxTransparency(value)
        end
    )
    
    -- Custom text input
    local customText, posY, getCustomText, setCustomText = createTextInput(
        parent, posY, "Custom Text", ESP.CustomText,
        function(value) 
            ESP.CustomText = value
            updateCustomText(value)
        end
    )
    
    -- Target Highlight section
    local targetSection, posY = createSection("Target Highlighting", parent, posY)
    
    -- Highlight Target toggle
    local highlightTarget, posY, getHighlightTarget, setHighlightTarget = createToggle(
        parent, posY, "Highlight Target", ESP.HighlightTarget,
        function(value) ESP.HighlightTarget = value end
    )
    
    -- Target Color picker
    local targetColor, posY, getTargetColor, setTargetColor = createColorPicker(
        parent, posY, "Target Color", ESP.TargetColor,
        function(color) ESP.TargetColor = color end
    )
    
    -- Update canvas size
    parent.CanvasSize = UDim2.new(0, 0, 0, posY + 20)
    
    -- Store getters and setters
    return {
        getTracers = getTracers,
        setTracers = setTracers,
        getTracerOrigin = getTracerOrigin,
        setTracerOrigin = setTracerOrigin,
        getSkeleton = getSkeleton,
        setSkeleton = setSkeleton,
        getChams = getChams,
        setChams = setChams,
        getChamsTransparency = getChamsTransparency,
        setChamsTransparency = setChamsTransparency,
        getHeadDotSize = getHeadDotSize,
        setHeadDotSize = setHeadDotSize,
        getBoxThickness = getBoxThickness,
        setBoxThickness = setBoxThickness,
        getBoxTransparency = getBoxTransparency,
        setBoxTransparency = setBoxTransparency,
        getCustomText = getCustomText,
        setCustomText = setCustomText,
        getHighlightTarget = getHighlightTarget,
        setHighlightTarget = setHighlightTarget,
        getTargetColor = getTargetColor,
        setTargetColor = setTargetColor
    }
end

-- Fill content for the Advanced tab
local function createAdvancedTabControls(parent)
    local posY = 0
    
    -- Advanced Features section
    local advancedSection, posY = createSection("Advanced Features", parent, posY)
    
    -- Visibility Check toggle
    local visibilityCheck, posY, getVisibilityCheck, setVisibilityCheck = createToggle(
        parent, posY, "Visibility Check", ESP.VisibilityCheck,
        function(value) ESP.VisibilityCheck = value end
    )
    
    -- Predict Movement toggle
    local predictMovement, posY, getPredictMovement, setPredictMovement = createToggle(
        parent, posY, "Predict Movement", ESP.PredictMovement,
        function(value) ESP.PredictMovement = value end
    )
    
    -- Prediction Amount slider
    local predictionAmount, posY, getPredictionAmount, setPredictionAmount = createSlider(
        parent, posY, "Prediction Amount", 0.1, 2, ESP.PredictionAmount,
        function(value) ESP.PredictionAmount = value end
    )
    
    -- Always on Top toggle
    local alwaysOnTop, posY, getAlwaysOnTop, setAlwaysOnTop = createToggle(
        parent, posY, "Always on Top", ESP.AlwaysOnTop,
        function(value) 
            ESP.AlwaysOnTop = value
            updateZIndex(value)
        end
    )
    
    -- Performance section
    local performanceSection, posY = createSection("Performance", parent, posY)
    
    -- Optimization Level dropdown
    local optimizationLevel, posY, getOptimizationLevel, setOptimizationLevel = createDropdown(
        parent, posY, "Optimization Level",
        {"Low", "Medium", "High"},
        ESP.OptimizationLevel == 1 and "Low" or (ESP.OptimizationLevel == 2 and "Medium" or "High"),
        function(value, index) 
            ESP.OptimizationLevel = index
            adjustOptimizationSettings()
        end
    )
    
    -- Performance Mode toggle
    local performanceMode, posY, getPerformanceMode, setPerformanceMode = createToggle(
        parent, posY, "Performance Mode", ESP.PerformanceMode,
        function(value) 
            ESP.PerformanceMode = value
            setupUpdateConnection()
        end
    )
    
    -- Refresh Rate slider (only active in performance mode)
    local refreshRate, posY, getRefreshRate, setRefreshRate = createSlider(
        parent, posY, "Refresh Rate (seconds)", 0.05, 0.5, ESP.RefreshRate,
        function(value) ESP.RefreshRate = value end
    )
    
    -- Render Distance slider
    local renderDistance, posY, getRenderDistance, setRenderDistance = createSlider(
        parent, posY, "Render Distance", 100, 5000, ESP.RenderDistance,
        function(value) ESP.RenderDistance = value end
    )
    
    -- Target FPS slider
    local targetFPS, posY, getTargetFPS, setTargetFPS = createSlider(
        parent, posY, "Target FPS", 30, 240, ESP.TargetFPS,
        function(value) ESP.TargetFPS = value end
    )
    
    -- Auto Optimization button
    local autoOptimizeButton, posY = createButton(
        parent, posY, "Auto-Optimize Performance", Color3.fromRGB(0, 150, 0),
        function() optimizePerformance() end
    )
    
    -- Update canvas size
    parent.CanvasSize = UDim2.new(0, 0, 0, posY + 20)
    
    -- Store getters and setters
    return {
        getVisibilityCheck = getVisibilityCheck,
        setVisibilityCheck = setVisibilityCheck,
        getPredictMovement = getPredictMovement,
        setPredictMovement = setPredictMovement,
        getPredictionAmount = getPredictionAmount,
        setPredictionAmount = setPredictionAmount,
        getAlwaysOnTop = getAlwaysOnTop,
        setAlwaysOnTop = setAlwaysOnTop,
        getOptimizationLevel = getOptimizationLevel,
        setOptimizationLevel = setOptimizationLevel,
        getPerformanceMode = getPerformanceMode,
        setPerformanceMode = setPerformanceMode,
        getRefreshRate = getRefreshRate,
        setRefreshRate = setRefreshRate,
        getRenderDistance = getRenderDistance,
        setRenderDistance = setRenderDistance,
        getTargetFPS = getTargetFPS,
        setTargetFPS = setTargetFPS
    }
end

-- Fill content for the System tab
local function createSystemTabControls(parent)
    local posY = 0
    
    -- System section
    local systemSection, posY = createSection("System", parent, posY)
    
    -- Auto-Fix toggle
    local autoFix, posY, getAutoFix, setAutoFix = createToggle(
        parent, posY, "Auto-Fix Errors", ESP.AutoFixEnabled,
        function(value) ESP.AutoFixEnabled = value end
    )
    
    -- Status Checks toggle
    local statusChecks, posY, getStatusChecks, setStatusChecks = createToggle(
        parent, posY, "Status Checks", ESP.StatusChecks,
        function(value) ESP.StatusChecks = value end
    )
    
    -- Debug Mode toggle
    local debugMode, posY, getDebugMode, setDebugMode = createToggle(
        parent, posY, "Debug Mode", ESP.DebugMode,
        function(value) ESP.DebugMode = value end
    )
    
    -- Self-Test button
    local selfTestButton, posY = createButton(
        parent, posY, "Run Self-Test", Color3.fromRGB(60, 60, 180),
        function() runSelfTest() end
    )
    
    -- Reset ESP button
    local resetButton, posY = createButton(
        parent, posY, "Reset ESP System", Color3.fromRGB(200, 40, 40),
        function() resetESP() end
    )
    
    -- Show Diagnostics button
    local diagnosticsButton, posY = createButton(
        parent, posY, "Show Diagnostics", Color3.fromRGB(40, 120, 80),
        function() toggleDiagnostics() end
    )
    
    -- Information section
    local infoSection, posY = createSection("Information", parent, posY)
    
    -- Version info
    local versionInfo = Instance.new("TextLabel")
    versionInfo.Name = "VersionInfo"
    versionInfo.Size = UDim2.new(1, 0, 0, 60)
    versionInfo.Position = UDim2.new(0, 0, 0, posY)
    versionInfo.BackgroundTransparency = 1
    versionInfo.Font = Enum.Font.Gotham
    versionInfo.TextColor3 = Color3.fromRGB(180, 180, 180)
    versionInfo.TextSize = 14
    versionInfo.TextWrapped = true
    versionInfo.Text = "Advanced ESP System v1.5\nPress F4 to toggle ESP\nPress F5 to show diagnostics\nPress F6 to reset ESP"
    versionInfo.Parent = parent
    
    posY = posY + 70
    
    -- Update canvas size
    parent.CanvasSize = UDim2.new(0, 0, 0, posY + 20)
    
    -- Store getters and setters
    return {
        getAutoFix = getAutoFix,
        setAutoFix = setAutoFix,
        getStatusChecks = getStatusChecks,
        setStatusChecks = setStatusChecks,
        getDebugMode = getDebugMode,
        setDebugMode = setDebugMode
    }
end

-- Update settings UI based on current ESP settings
local function updateSettingsUI()
    -- Will be implemented to reflect changes in settings
    -- This function will be called when global settings change
    if not MainFrame then return end
    
    -- Update UI controls here based on current ESP settings
    -- This would involve accessing the controls and updating them
end

-- Run self-test to diagnose ESP system
local function runSelfTest()
    if ESP.DebugMode then
        print("[ESP SELF-TEST] Starting ESP system self-test...")
    end
    
    local issues = {}
    
    -- Test 1: Check if ScreenGui exists and is valid
    if not ScreenGui or not ScreenGui.Parent then
        table.insert(issues, "ScreenGui not found or not properly parented")
    end
    
    -- Test 2: Check for ESP objects
    local objectCount = 0
    for _ in pairs(ESPObjects) do
        objectCount = objectCount + 1
    end
    
    if objectCount == 0 then
        table.insert(issues, "No ESP objects found")
    end
    
    -- Test 3: Check update connection
    if not eventConnections.update then
        table.insert(issues, "Update connection not established")
    end
    
    -- Test 4: Check FPS performance
    local avgFPS = getAverageFPS()
    if avgFPS < 30 then
        table.insert(issues, "Low FPS detected: " .. math.floor(avgFPS) .. " FPS")
    end
    
    -- Test 5: Check for memory leaks - compare object count to player count
    local playerCount = 0
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            playerCount = playerCount + 1
        end
    end
    
    if objectCount > playerCount * 2 then
        table.insert(issues, "Potential memory leak: " .. objectCount .. " objects for " .. playerCount .. " players")
    end
    
    -- Show results
    if #issues > 0 then
        if ESP.DebugMode then
            print("[ESP SELF-TEST] Issues found:")
            for i, issue in ipairs(issues) do
                print("  " .. i .. ". " .. issue)
            end
        end
        
        -- Create a notification about issues
        createNotification("Self-Test Results", #issues .. " issues found. Check diagnostics for details.", Color3.fromRGB(255, 100, 100))
        
        -- Log issues in diagnostics
        for _, issue in ipairs(issues) do
            logError("SelfTestIssue", issue, false)
        end
        
        return false, issues
    else
        if ESP.DebugMode then
            print("[ESP SELF-TEST] All tests passed. ESP system is functioning properly.")
        end
        
        -- Create a notification about success
        createNotification("Self-Test Results", "All tests passed!", Color3.fromRGB(100, 255, 100))
        
        return true, {}
    end
end

-- Create a temporary notification
local function createNotification(title, message, color)
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(0, 250, 0, 80)
    notification.Position = UDim2.new(0.5, -125, 0, -100)
    notification.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    notification.BorderSizePixel = 0
    notification.Parent = ScreenGui
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = notification
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextColor3 = color or Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 16
    titleLabel.Text = title
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.Size = UDim2.new(1, -20, 0, 40)
    messageLabel.Position = UDim2.new(0, 10, 0, 30)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    messageLabel.TextSize = 14
    messageLabel.TextWrapped = true
    messageLabel.Text = message
    messageLabel.Parent = notification
    
    -- Animate in
    notification:TweenPosition(UDim2.new(0.5, -125, 0, 20), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.5, true)
    
    -- Animate out after 3 seconds
    task.delay(3, function()
        notification:TweenPosition(UDim2.new(0.5, -125, 0, -100), Enum.EasingDirection.In, Enum.EasingStyle.Quart, 0.5, true, function()
            notification:Destroy()
        end)
    end)
end

-- Adjust settings based on optimization level
local function adjustOptimizationSettings()
    if ESP.OptimizationLevel == 1 then
        -- Low optimization (maximum features, may be slower)
        ESP.PerformanceMode = false
        ESP.ShowChams = true
        ESP.ShowSkeleton = true
        ESP.ShowTracers = true
        ESP.VisibilityCheck = true
        ESP.PredictMovement = true
    elseif ESP.OptimizationLevel == 2 then
        -- Medium optimization (balanced)
        ESP.PerformanceMode = false
        ESP.ShowChams = false
        ESP.ShowSkeleton = true
        ESP.ShowTracers = true
        ESP.VisibilityCheck = false
        ESP.PredictMovement = true
    else
        -- High optimization (minimal features, faster)
        ESP.PerformanceMode = true
        ESP.RefreshRate = 0.1
        ESP.ShowChams = false
        ESP.ShowSkeleton = false
        ESP.ShowTracers = false
        ESP.VisibilityCheck = false
        ESP.PredictMovement = false
    end
    
    -- Apply changes
    setupUpdateConnection()
    refreshAllESP()
}

-- Refresh all ESP elements
local function refreshAllESP()
    clearESPObjects()
    rebuildESPObjects()
}

-- Update ESP colors
local function updateESPColors(color)
    for player, box in pairs(ESPObjects) do
        if box then
            for _, line in ipairs({box.TopLine, box.BottomLine, box.LeftLine, box.RightLine}) do
                line.BackgroundColor3 = color
            end
            
            if box:FindFirstChild("NameLabel") then
                box.NameLabel.TextColor3 = color
            end
        end
    end
}

-- Refresh health bars
local function refreshHealthBars()
    for player, box in pairs(ESPObjects) do
        if box and box:FindFirstChild("HealthBarBG") then
            box.HealthBarBG.Visible = ESP.ShowHealthBar
        end
    end
}

-- Refresh labels
local function refreshLabels()
    for player, box in pairs(ESPObjects) do
        if box then
            if box:FindFirstChild("DistanceLabel") then
                box.DistanceLabel.Visible = ESP.ShowDistance
            end
            
            if box:FindFirstChild("WeaponLabel") then
                box.WeaponLabel.Visible = ESP.ShowWeapon
            end
        end
    end
}

-- Update custom text
local function updateCustomText(text)
    for player, box in pairs(ESPObjects) do
        if box and box:FindFirstChild("CustomLabel") then
            box.CustomLabel.Text = text
        end
        
        -- If custom text didn't exist, create it
        if box and not box:FindFirstChild("CustomLabel") and text ~= "" then
            local customLabel = Instance.new("TextLabel")
            customLabel.Name = "CustomLabel"
            customLabel.BackgroundTransparency = 1
            customLabel.Size = UDim2.new(1, 0, 0, 20)
            customLabel.Position = UDim2.new(0, 0, 1, 25)
            customLabel.Font = Enum.Font.SourceSans
            customLabel.TextColor3 = ESP.BoxColor
            customLabel.TextSize = 14
            customLabel.TextStrokeTransparency = 0.7
            customLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
            customLabel.Text = text
            customLabel.Parent = box
        end
    end
}

-- Refresh head dots
local function refreshHeadDots()
    -- Remove all head dots
    for player, dot in pairs(HeadDotObjects) do
        if dot and dot.Parent then
            dot:Destroy()
        end
    end
    
    HeadDotObjects = {}
    
    -- Create new head dots if enabled
    if ESP.ShowHeadDot then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createHeadDot(player)
            end
        end
    end
}

-- Update head dot size
local function updateHeadDotSize(size)
    for player, dot in pairs(HeadDotObjects) do
        if dot then
            dot.Size = UDim2.new(0, size, 0, size)
        end
    end
}

-- Refresh box styles
local function refreshBoxStyles()
    -- This is a more complex operation that would require re-creating all ESP boxes
    refreshAllESP()
}

-- Refresh tracers
local function refreshTracers()
    -- Remove all tracers
    for player, tracer in pairs(TracerObjects) do
        if tracer and tracer.Parent then
            tracer:Destroy()
        end
    end
    
    TracerObjects = {}
    
    -- Create new tracers if enabled
    if ESP.ShowTracers then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createTracer(player)
            end
        end
    end
}

-- Refresh skeletons
local function refreshSkeleton()
    -- Remove all skeletons
    for player, skeleton in pairs(SkeletonObjects) do
        if skeleton and skeleton.Parent then
            skeleton:Destroy()
        end
    end
    
    SkeletonObjects = {}
    
    -- Create new skeletons if enabled
    if ESP.ShowSkeleton then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createSkeleton(player)
            end
        end
    end
}

-- Refresh chams
local function refreshChams()
    -- Remove all chams
    for player, cham in pairs(ChamsObjects) do
        if cham and cham.Parent then
            cham:Destroy()
        end
    end
    
    ChamsObjects = {}
    
    -- Create new chams if enabled
    if ESP.ShowChams then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                createChams(player)
            end
        end
    end
}

-- Update chams transparency
local function updateChamsTransparency(transparency)
    for player, cham in pairs(ChamsObjects) do
        if cham then
            cham.FillTransparency = transparency
        end
    end
}

-- Update box thickness
local function updateBoxThickness(thickness)
    for player, box in pairs(ESPObjects) do
        if box then
            box.TopLine.Size = UDim2.new(1, 0, 0, thickness)
            box.BottomLine.Size = UDim2.new(1, 0, 0, thickness)
            box.BottomLine.Position = UDim2.new(0, 0, 1, -thickness)
            box.LeftLine.Size = UDim2.new(0, thickness, 1, 0)
            box.RightLine.Size = UDim2.new(0, thickness, 1, 0)
            box.RightLine.Position = UDim2.new(1, -thickness, 0, 0)
        end
    end
}

-- Update box transparency
local function updateBoxTransparency(transparency)
    for player, box in pairs(ESPObjects) do
        if box then
            for _, line in ipairs({box.TopLine, box.BottomLine, box.LeftLine, box.RightLine}) do
                line.BackgroundTransparency = transparency
            end
        end
    end
}

-- Update Z-index for always on top
local function updateZIndex(alwaysOnTop)
    local zIndex = alwaysOnTop and 10 or 1
    
    for player, box in pairs(ESPObjects) do
        if box then
            box.ZIndex = zIndex
            
            for _, child in ipairs(box:GetChildren()) do
                child.ZIndex = zIndex
            end
        end
    end
    
    for player, tracer in pairs(TracerObjects) do
        if tracer then
            tracer.ZIndex = zIndex
        end
    end
    
    for player, headDot in pairs(HeadDotObjects) do
        if headDot then
            headDot.ZIndex = zIndex
        end
    end
    
    for player, skeleton in pairs(SkeletonObjects) do
        if skeleton then
            skeleton.ZIndex = zIndex
            
            for _, line in ipairs(skeleton:GetChildren()) do
                line.ZIndex = zIndex
            end
        end
    end
}

-- Create ESP box for a player
local function createESPBox(player)
    if player == LocalPlayer then return end
    
    -- Skip if box already exists
    if ESPObjects[player] then
        return ESPObjects[player]
    end
    
    -- Create the box outline based on style
    local Box = Instance.new("Frame")
    Box.Name = player.Name .. "Box"
    Box.BackgroundTransparency = 1
    Box.BorderSizePixel = 0
    Box.Size = UDim2.new(0, 0, 0, 0)
    Box.ZIndex = ESP.AlwaysOnTop and 10 or 1
    Box.Parent = ScreenGui
    
    if ESP.BoxStyle == 1 then
        -- Regular box style (four lines)
        
        -- Top line
        local TopLine = Instance.new("Frame")
        TopLine.Name = "TopLine"
        TopLine.BorderSizePixel = 0
        TopLine.BackgroundColor3 = ESP.BoxColor
        TopLine.BackgroundTransparency = ESP.BoxTransparency
        TopLine.Size = UDim2.new(1, 0, 0, ESP.BoxThickness)
        TopLine.Position = UDim2.new(0, 0, 0, 0)
        TopLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        TopLine.Parent = Box
        
        -- Bottom line
        local BottomLine = Instance.new("Frame")
        BottomLine.Name = "BottomLine"
        BottomLine.BorderSizePixel = 0
        BottomLine.BackgroundColor3 = ESP.BoxColor
        BottomLine.BackgroundTransparency = ESP.BoxTransparency
        BottomLine.Size = UDim2.new(1, 0, 0, ESP.BoxThickness)
        BottomLine.Position = UDim2.new(0, 0, 1, -ESP.BoxThickness)
        BottomLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        BottomLine.Parent = Box
        
        -- Left line
        local LeftLine = Instance.new("Frame")
        LeftLine.Name = "LeftLine"
        LeftLine.BorderSizePixel = 0
        LeftLine.BackgroundColor3 = ESP.BoxColor
        LeftLine.BackgroundTransparency = ESP.BoxTransparency
        LeftLine.Size = UDim2.new(0, ESP.BoxThickness, 1, 0)
        LeftLine.Position = UDim2.new(0, 0, 0, 0)
        LeftLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        LeftLine.Parent = Box
        
        -- Right line
        local RightLine = Instance.new("Frame")
        RightLine.Name = "RightLine"
        RightLine.BorderSizePixel = 0
        RightLine.BackgroundColor3 = ESP.BoxColor
        RightLine.BackgroundTransparency = ESP.BoxTransparency
        RightLine.Size = UDim2.new(0, ESP.BoxThickness, 1, 0)
        RightLine.Position = UDim2.new(1, -ESP.BoxThickness, 0, 0)
        RightLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        RightLine.Parent = Box
    elseif ESP.BoxStyle == 3 then
        -- Corner style (eight lines for corners)
        local cornerSize = 8 -- Corner size in pixels
        
        -- Top left corner - Horizontal
        local TLH = Instance.new("Frame")
        TLH.Name = "TopLeftH"
        TLH.BorderSizePixel = 0
        TLH.BackgroundColor3 = ESP.BoxColor
        TLH.BackgroundTransparency = ESP.BoxTransparency
        TLH.Size = UDim2.new(0, cornerSize, 0, ESP.BoxThickness)
        TLH.Position = UDim2.new(0, 0, 0, 0)
        TLH.ZIndex = ESP.AlwaysOnTop and 10 or 1
        TLH.Parent = Box
        
        -- Top left corner - Vertical
        local TLV = Instance.new("Frame")
        TLV.Name = "TopLeftV"
        TLV.BorderSizePixel = 0
        TLV.BackgroundColor3 = ESP.BoxColor
        TLV.BackgroundTransparency = ESP.BoxTransparency
        TLV.Size = UDim2.new(0, ESP.BoxThickness, 0, cornerSize)
        TLV.Position = UDim2.new(0, 0, 0, 0)
        TLV.ZIndex = ESP.AlwaysOnTop and 10 or 1
        TLV.Parent = Box
        
        -- Top right corner - Horizontal
        local TRH = Instance.new("Frame")
        TRH.Name = "TopRightH"
        TRH.BorderSizePixel = 0
        TRH.BackgroundColor3 = ESP.BoxColor
        TRH.BackgroundTransparency = ESP.BoxTransparency
        TRH.Size = UDim2.new(0, cornerSize, 0, ESP.BoxThickness)
        TRH.Position = UDim2.new(1, -cornerSize, 0, 0)
        TRH.ZIndex = ESP.AlwaysOnTop and 10 or 1
        TRH.Parent = Box
        
        -- Top right corner - Vertical
        local TRV = Instance.new("Frame")
        TRV.Name = "TopRightV"
        TRV.BorderSizePixel = 0
        TRV.BackgroundColor3 = ESP.BoxColor
        TRV.BackgroundTransparency = ESP.BoxTransparency
        TRV.Size = UDim2.new(0, ESP.BoxThickness, 0, cornerSize)
        TRV.Position = UDim2.new(1, -ESP.BoxThickness, 0, 0)
        TRV.ZIndex = ESP.AlwaysOnTop and 10 or 1
        TRV.Parent = Box
        
        -- Bottom left corner - Horizontal
        local BLH = Instance.new("Frame")
        BLH.Name = "BottomLeftH"
        BLH.BorderSizePixel = 0
        BLH.BackgroundColor3 = ESP.BoxColor
        BLH.BackgroundTransparency = ESP.BoxTransparency
        BLH.Size = UDim2.new(0, cornerSize, 0, ESP.BoxThickness)
        BLH.Position = UDim2.new(0, 0, 1, -ESP.BoxThickness)
        BLH.ZIndex = ESP.AlwaysOnTop and 10 or 1
        BLH.Parent = Box
        
        -- Bottom left corner - Vertical
        local BLV = Instance.new("Frame")
        BLV.Name = "BottomLeftV"
        BLV.BorderSizePixel = 0
        BLV.BackgroundColor3 = ESP.BoxColor
        BLV.BackgroundTransparency = ESP.BoxTransparency
        BLV.Size = UDim2.new(0, ESP.BoxThickness, 0, cornerSize)
        BLV.Position = UDim2.new(0, 0, 1, -cornerSize)
        BLV.ZIndex = ESP.AlwaysOnTop and 10 or 1
        BLV.Parent = Box
        
        -- Bottom right corner - Horizontal
        local BRH = Instance.new("Frame")
        BRH.Name = "BottomRightH"
        BRH.BorderSizePixel = 0
        BRH.BackgroundColor3 = ESP.BoxColor
        BRH.BackgroundTransparency = ESP.BoxTransparency
        BRH.Size = UDim2.new(0, cornerSize, 0, ESP.BoxThickness)
        BRH.Position = UDim2.new(1, -cornerSize, 1, -ESP.BoxThickness)
        BRH.ZIndex = ESP.AlwaysOnTop and 10 or 1
        BRH.Parent = Box
        
        -- Bottom right corner - Vertical
        local BRV = Instance.new("Frame")
        BRV.Name = "BottomRightV"
        BRV.BorderSizePixel = 0
        BRV.BackgroundColor3 = ESP.BoxColor
        BRV.BackgroundTransparency = ESP.BoxTransparency
        BRV.Size = UDim2.new(0, ESP.BoxThickness, 0, cornerSize)
        BRV.Position = UDim2.new(1, -ESP.BoxThickness, 1, -cornerSize)
        BRV.ZIndex = ESP.AlwaysOnTop and 10 or 1
        BRV.Parent = Box
    else
        -- 3D box style would be more complex and not implemented here
        -- Fallback to regular style
        
        -- Top line
        local TopLine = Instance.new("Frame")
        TopLine.Name = "TopLine"
        TopLine.BorderSizePixel = 0
        TopLine.BackgroundColor3 = ESP.BoxColor
        TopLine.BackgroundTransparency = ESP.BoxTransparency
        TopLine.Size = UDim2.new(1, 0, 0, ESP.BoxThickness)
        TopLine.Position = UDim2.new(0, 0, 0, 0)
        TopLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        TopLine.Parent = Box
        
        -- Bottom line
        local BottomLine = Instance.new("Frame")
        BottomLine.Name = "BottomLine"
        BottomLine.BorderSizePixel = 0
        BottomLine.BackgroundColor3 = ESP.BoxColor
        BottomLine.BackgroundTransparency = ESP.BoxTransparency
        BottomLine.Size = UDim2.new(1, 0, 0, ESP.BoxThickness)
        BottomLine.Position = UDim2.new(0, 0, 1, -ESP.BoxThickness)
        BottomLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        BottomLine.Parent = Box
        
        -- Left line
        local LeftLine = Instance.new("Frame")
        LeftLine.Name = "LeftLine"
        LeftLine.BorderSizePixel = 0
        LeftLine.BackgroundColor3 = ESP.BoxColor
        LeftLine.BackgroundTransparency = ESP.BoxTransparency
        LeftLine.Size = UDim2.new(0, ESP.BoxThickness, 1, 0)
        LeftLine.Position = UDim2.new(0, 0, 0, 0)
        LeftLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        LeftLine.Parent = Box
        
        -- Right line
        local RightLine = Instance.new("Frame")
        RightLine.Name = "RightLine"
        RightLine.BorderSizePixel = 0
        RightLine.BackgroundColor3 = ESP.BoxColor
        RightLine.BackgroundTransparency = ESP.BoxTransparency
        RightLine.Size = UDim2.new(0, ESP.BoxThickness, 1, 0)
        RightLine.Position = UDim2.new(1, -ESP.BoxThickness, 0, 0)
        RightLine.ZIndex = ESP.AlwaysOnTop and 10 or 1
        RightLine.Parent = Box
    end
    
    -- Player name label
    local NameLabel = Instance.new("TextLabel")
    NameLabel.Name = "NameLabel"
    NameLabel.BackgroundTransparency = 1
    NameLabel.Size = UDim2.new(1, 0, 0, 20)
    NameLabel.Position = UDim2.new(0, 0, 0, -20)
    NameLabel.Font = Enum.Font.SourceSansBold
    NameLabel.TextColor3 = ESP.BoxColor
    NameLabel.TextSize = 14
    NameLabel.Text = player.Name
    NameLabel.TextStrokeTransparency = 0.7
    NameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    NameLabel.ZIndex = ESP.AlwaysOnTop and 10 or 1
    NameLabel.Parent = Box
    
    -- Health bar background
    local HealthBarBG = Instance.new("Frame")
    HealthBarBG.Name = "HealthBarBG"
    HealthBarBG.BorderSizePixel = 0
    HealthBarBG.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    HealthBarBG.Size = UDim2.new(0, 5, 1, 0)
    HealthBarBG.Position = UDim2.new(1, 5, 0, 0)
    HealthBarBG.Visible = ESP.ShowHealthBar
    HealthBarBG.ZIndex = ESP.AlwaysOnTop and 10 or 1
    HealthBarBG.Parent = Box
    
    -- Health bar fill
    local HealthBar = Instance.new("Frame")
    HealthBar.Name = "HealthBar"
    HealthBar.BorderSizePixel = 0
    HealthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    HealthBar.Size = UDim2.new(1, 0, 1, 0)
    HealthBar.Position = UDim2.new(0, 0, 0, 0)
    HealthBar.AnchorPoint = Vector2.new(0, 1)
    HealthBar.ZIndex = ESP.AlwaysOnTop and 10 or 1
    HealthBar.Parent = HealthBarBG
    
    -- Distance label
    local DistanceLabel = Instance.new("TextLabel")
    DistanceLabel.Name = "DistanceLabel"
    DistanceLabel.BackgroundTransparency = 1
    DistanceLabel.Size = UDim2.new(1, 0, 0, 20)
    DistanceLabel.Position = UDim2.new(0, 0, 1, 5)
    DistanceLabel.Font = Enum.Font.SourceSans
    DistanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    DistanceLabel.TextSize = 12
    DistanceLabel.TextStrokeTransparency = 0.7
    DistanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    DistanceLabel.Visible = ESP.ShowDistance
    DistanceLabel.ZIndex = ESP.AlwaysOnTop and 10 or 1
    DistanceLabel.Parent = Box
    
    -- If custom text is enabled
    if ESP.CustomText ~= "" then
        local CustomLabel = Instance.new("TextLabel")
        CustomLabel.Name = "CustomLabel"
        CustomLabel.BackgroundTransparency = 1
        CustomLabel.Size = UDim2.new(1, 0, 0, 20)
        CustomLabel.Position = UDim2.new(0, 0, 1, 25)
        CustomLabel.Font = Enum.Font.SourceSans
        CustomLabel.TextColor3 = ESP.BoxColor
        CustomLabel.TextSize = 14
        CustomLabel.TextStrokeTransparency = 0.7
        CustomLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        CustomLabel.Text = ESP.CustomText
        CustomLabel.ZIndex = ESP.AlwaysOnTop and 10 or 1
        CustomLabel.Parent = Box
    end
    
    ESPObjects[player] = Box
    Diagnostics.ActiveESPObjects = Diagnostics.ActiveESPObjects + 1
    
    return Box
end

-- Create a tracer line for a player
local function createTracer(player)
    if player == LocalPlayer then return end
    
    -- Skip if tracer already exists
    if TracerObjects[player] then
        return TracerObjects[player]
    end
    
    -- Create tracer line
    local Tracer = Instance.new("Frame")
    Tracer.Name = player.Name .. "Tracer"
    Tracer.BorderSizePixel = 0
    Tracer.BackgroundColor3 = ESP.BoxColor
    Tracer.BackgroundTransparency = ESP.BoxTransparency
    Tracer.Size = UDim2.new(0, ESP.BoxThickness, 0, 0) -- Height will be set dynamically
    Tracer.AnchorPoint = Vector2.new(0.5, 0)
    Tracer.ZIndex = ESP.AlwaysOnTop and 10 or 1
    Tracer.Parent = ScreenGui
    
    TracerObjects[player] = Tracer
    return Tracer
end

-- Create a head dot for a player
local function createHeadDot(player)
    if player == LocalPlayer then return end
    
    -- Skip if head dot already exists
    if HeadDotObjects[player] then
        return HeadDotObjects[player]
    end
    
    -- Create head dot
    local HeadDot = Instance.new("Frame")
    HeadDot.Name = player.Name .. "HeadDot"
    HeadDot.BorderSizePixel = 0
    HeadDot.BackgroundColor3 = ESP.BoxColor
    HeadDot.BackgroundTransparency = ESP.BoxTransparency
    HeadDot.Size = UDim2.new(0, ESP.HeadDotSize, 0, ESP.HeadDotSize)
    HeadDot.AnchorPoint = Vector2.new(0.5, 0.5)
    HeadDot.ZIndex = ESP.AlwaysOnTop and 10 or 1
    HeadDot.Parent = ScreenGui
    
    -- Make it round
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(1, 0)
    UICorner.Parent = HeadDot
    
    HeadDotObjects[player] = HeadDot
    return HeadDot
end

-- Create a skeleton for a player
local function createSkeleton(player)
    if player == LocalPlayer then return end
    
    -- Skip if skeleton already exists
    if SkeletonObjects[player] then
        return SkeletonObjects[player]
    end
    
    -- Create skeleton container
    local Skeleton = Instance.new("Folder")
    Skeleton.Name = player.Name .. "Skeleton"
    Skeleton.Parent = ScreenGui
    
    -- We'll create the actual lines dynamically when updating
    SkeletonObjects[player] = Skeleton
    return Skeleton
end

-- Create chams for a player
local function createChams(player)
    if player == LocalPlayer then return end
    
    -- Skip if chams already exists
    if ChamsObjects[player] then
        return ChamsObjects[player]
    end
    
    local character = player.Character
    if not character then return end
    
    -- Use Highlight object if available (newer Roblox versions)
    local success, highlight = pcall(function()
        local highlightObj = Instance.new("Highlight")
        highlightObj.Name = player.Name .. "Chams"
        highlightObj.FillColor = ESP.BoxColor
        highlightObj.OutlineColor = ESP.BoxColor
        highlightObj.FillTransparency = ESP.ChamsTransparency
        highlightObj.OutlineTransparency = 0.5
        highlightObj.Adornee = character
        highlightObj.Parent = ScreenGui
        return highlightObj
    end)
    
    if success and highlight then
        ChamsObjects[player] = highlight
        return highlight
    else
        -- Fallback for older Roblox versions - create manual chams
        logError("ChamsError", "Highlight object not available, falling back to manual chams.", false)
        
        -- Create a folder to store chams parts
        local chamsFolder = Instance.new("Folder")
        chamsFolder.Name = player.Name .. "Chams"
        chamsFolder.Parent = ScreenGui
        
        -- Create box highlights for each body part
        local bodyParts = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "HumanoidRootPart"}
        
        for _, partName in ipairs(bodyParts) do
            local part = character:FindFirstChild(partName)
            if part and part:IsA("BasePart") then
                local boxHandleAdornment = Instance.new("BoxHandleAdornment")
                boxHandleAdornment.Name = partName .. "Cham"
                boxHandleAdornment.Adornee = part
                boxHandleAdornment.AlwaysOnTop = true
                boxHandleAdornment.ZIndex = 10
                boxHandleAdornment.Size = part.Size + Vector3.new(0.1, 0.1, 0.1)
                boxHandleAdornment.Transparency = ESP.ChamsTransparency
                boxHandleAdornment.Color3 = ESP.BoxColor
                boxHandleAdornment.Parent = chamsFolder
            end
        end
        
        ChamsObjects[player] = chamsFolder
        return chamsFolder
    end
end

-- Update ESP box position and appearance
local function updateESPBox(player, box)
    local character = player.Character
    if not character then return false end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    -- Team check
    if ESP.TeamCheck and player.Team == LocalPlayer.Team then
        box.Visible = false
        return false
    end
    
    -- Distance check
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end
    
    -- Check if within render distance
    local distance = (hrp.Position - Camera.CFrame.Position).Magnitude
    if distance > ESP.RenderDistance then
        box.Visible = false
        return false
    end
    
    -- Update distance label
    local distanceLabel = box:FindFirstChild("DistanceLabel")
    if distanceLabel then
        distanceLabel.Text = math.floor(distance) .. " studs"
    end
    
    -- Update health bar
    local healthBar = box:FindFirstChild("HealthBarBG")
    if healthBar and healthBar:FindFirstChild("HealthBar") and humanoid then
        local healthPercent = humanoid.Health / humanoid.MaxHealth
        healthBar.HealthBar.Size = UDim2.new(1, 0, healthPercent, 0)
        
        -- Health color gradient from green to red
        local healthColor = Color3.fromRGB(
            255 * (1 - healthPercent),
            255 * healthPercent,
            0
        )
        healthBar.HealthBar.BackgroundColor3 = healthColor
    end
    
    -- Visibility check
    if ESP.VisibilityCheck then
        local visible = isVisible(character, Camera.CFrame.Position)
        
        -- Make ESP more transparent if not visible
        for _, line in ipairs({box.TopLine, box.BottomLine, box.LeftLine, box.RightLine}) do
            line.BackgroundTransparency = visible and ESP.BoxTransparency or ESP.BoxTransparency + 0.4
        end
    end
    
    -- Get corners
    local corners = getBoundingBox(character, ESP.PredictMovement, ESP.PredictionAmount)
    if not corners then return false end
    
    -- Convert 3D corners to 2D screen points
    local screenPoints = {}
    for _, corner in ipairs(corners) do
        local screenPoint = Camera:WorldToScreenPoint(corner)
        if screenPoint.Z < 0 then
            box.Visible = false
            return false
        end
        table.insert(screenPoints, Vector2.new(screenPoint.X, screenPoint.Y))
    end
    
    -- Find min and max points to create box dimensions
    local minX, minY = math.huge, math.huge
    local maxX, maxY = -math.huge, -math.huge
    
    for _, point in ipairs(screenPoints) do
        minX = math.min(minX, point.X)
        minY = math.min(minY, point.Y)
        maxX = math.max(maxX, point.X)
        maxY = math.max(maxY, point.Y)
    end
    
    -- Apply box position and size with a small buffer for smoothing
    box.Position = UDim2.new(0, minX, 0, minY)
    box.Size = UDim2.new(0, maxX - minX, 0, maxY - minY)
    box.Visible = ESP.Enabled
    
    -- Apply rainbow mode if enabled
    if ESP.RainbowMode then
        local hue = tick() % 10 / 10
        local rainbowColor = Color3.fromHSV(hue, 1, 1)
        
        for _, line in ipairs({box.TopLine, box.BottomLine, box.LeftLine, box.RightLine}) do
            line.BackgroundColor3 = rainbowColor
        end
        box.NameLabel.TextColor3 = rainbowColor
    elseif ESP.UseTeamColors and player.Team then
        -- Use team color if team colors are enabled
        local teamColor = player.TeamColor.Color
        
        for _, line in ipairs({box.TopLine, box.BottomLine, box.LeftLine, box.RightLine}) do
            line.BackgroundColor3 = teamColor
        end
        box.NameLabel.TextColor3 = teamColor
    elseif ESP.HighlightTarget and player == TargetPlayer then
        -- Highlight the targeted player
        for _, line in ipairs({box.TopLine, box.BottomLine, box.LeftLine, box.RightLine}) do
            line.BackgroundColor3 = ESP.TargetColor
        end
        box.NameLabel.TextColor3 = ESP.TargetColor
    end
    
    return true
end

-- Update tracer
local function updateTracer(player, tracer)
    if not ESP.ShowTracers then
        tracer.Visible = false
        return
    end
    
    local character = player.Character
    if not character then
        tracer.Visible = false
        return
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        tracer.Visible = false
        return
    end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        tracer.Visible = false
        return
    end
    
    -- Get character position
    local position = hrp.Position
    
    -- Convert to screen position
    local screenPosition = Camera:WorldToScreenPoint(position)
    
    -- Check if behind camera
    if screenPosition.Z < 0 then
        tracer.Visible = false
        return
    end
    
    -- Get screen dimensions
    local screenSize = Camera.ViewportSize
    
    -- Set tracer origin based on setting
    local originY
    if ESP.TracerOrigin == 1 then
        -- Top
        originY = 0
    elseif ESP.TracerOrigin == 2 then
        -- Center
        originY = screenSize.Y / 2
    else
        -- Bottom
        originY = screenSize.Y
    end
    
    -- Calculate angle and length
    local dx = screenPosition.X - screenSize.X / 2
    local dy = screenPosition.Y - originY
    local angle = math.atan2(dy, dx) - math.rad(90)
    local length = math.sqrt(dx * dx + dy * dy)
    
    -- Update tracer properties
    tracer.Position = UDim2.new(0, screenSize.X / 2, 0, originY)
    tracer.Size = UDim2.new(0, ESP.BoxThickness, 0, length)
    tracer.Rotation = math.deg(angle)
    
    -- Apply colors
    if ESP.RainbowMode then
        local hue = tick() % 10 / 10
        tracer.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
    elseif ESP.UseTeamColors and player.Team then
        tracer.BackgroundColor3 = player.TeamColor.Color
    elseif ESP.HighlightTarget and player == TargetPlayer then
        tracer.BackgroundColor3 = ESP.TargetColor
    else
        tracer.BackgroundColor3 = ESP.BoxColor
    end
    
    tracer.Visible = true
end

-- Update head dot
local function updateHeadDot(player, headDot)
    if not ESP.ShowHeadDot then
        headDot.Visible = false
        return
    end
    
    local character = player.Character
    if not character then
        headDot.Visible = false
        return
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        headDot.Visible = false
        return
    end
    
    local head = character:FindFirstChild("Head")
    if not head then
        headDot.Visible = false
        return
    end
    
    -- Get head position
    local position = head.Position
    
    -- Convert to screen position
    local screenPosition = Camera:WorldToScreenPoint(position)
    
    -- Check if behind camera
    if screenPosition.Z < 0 then
        headDot.Visible = false
        return
    end
    
    -- Update head dot position
    headDot.Position = UDim2.new(0, screenPosition.X, 0, screenPosition.Y)
    
    -- Apply colors
    if ESP.RainbowMode then
        local hue = tick() % 10 / 10
        headDot.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
    elseif ESP.UseTeamColors and player.Team then
        headDot.BackgroundColor3 = player.TeamColor.Color
    elseif ESP.HighlightTarget and player == TargetPlayer then
        headDot.BackgroundColor3 = ESP.TargetColor
    else
        headDot.BackgroundColor3 = ESP.BoxColor
    end
    
    headDot.Visible = true
end

-- Update skeleton
local function updateSkeleton(player, skeleton)
    if not ESP.ShowSkeleton then
        skeleton.Visible = false
        return
    end
    
    -- Clear existing lines
    for _, child in ipairs(skeleton:GetChildren()) do
        child:Destroy()
    end
    
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return end
    
    -- Bone connections to draw
    local bones = {
        -- Head to Torso
        {part1 = "Head", part2 = "Torso"},
        
        -- Torso to Arms
        {part1 = "Torso", part2 = "Left Arm"},
        {part1 = "Torso", part2 = "Right Arm"},
        
        -- Torso to Legs
        {part1 = "Torso", part2 = "Left Leg"},
        {part1 = "Torso", part2 = "Right Leg"}
    }
    
    -- Try to use R15 rig if possible
    local r15Bones = {
        -- Head to UpperTorso
        {part1 = "Head", part2 = "UpperTorso"},
        
        -- UpperTorso to LowerTorso
        {part1 = "UpperTorso", part2 = "LowerTorso"},
        
        -- UpperTorso to Arms
        {part1 = "UpperTorso", part2 = "LeftUpperArm"},
        {part1 = "LeftUpperArm", part2 = "LeftLowerArm"},
        {part1 = "LeftLowerArm", part2 = "LeftHand"},
        
        {part1 = "UpperTorso", part2 = "RightUpperArm"},
        {part1 = "RightUpperArm", part2 = "RightLowerArm"},
        {part1 = "RightLowerArm", part2 = "RightHand"},
        
        -- LowerTorso to Legs
        {part1 = "LowerTorso", part2 = "LeftUpperLeg"},
        {part1 = "LeftUpperLeg", part2 = "LeftLowerLeg"},
        {part1 = "LeftLowerLeg", part2 = "LeftFoot"},
        
        {part1 = "LowerTorso", part2 = "RightUpperLeg"},
        {part1 = "RightUpperLeg", part2 = "RightLowerLeg"},
        {part1 = "RightLowerLeg", part2 = "RightFoot"}
    }
    
    -- Determine if character is R15 or R6
    local isR15 = character:FindFirstChild("UpperTorso") ~= nil
    local connections = isR15 and r15Bones or bones
    
    -- Create lines for each bone connection
    for _, bone in ipairs(connections) do
        local part1 = character:FindFirstChild(bone.part1)
        local part2 = character:FindFirstChild(bone.part2)
        
        if part1 and part2 then
            -- Convert positions to screen space
            local pos1 = Camera:WorldToScreenPoint(part1.Position)
            local pos2 = Camera:WorldToScreenPoint(part2.Position)
            
            -- Skip if behind camera
            if pos1.Z < 0 or pos2.Z < 0 then
                continue
            end
            
            -- Calculate line properties
            local dx = pos2.X - pos1.X
            local dy = pos2.Y - pos1.Y
            local angle = math.atan2(dy, dx)
            local length = math.sqrt(dx * dx + dy * dy)
            
            -- Create line
            local line = Instance.new("Frame")
            line.Name = bone.part1 .. "_" .. bone.part2
            line.BorderSizePixel = 0
            line.BackgroundColor3 = ESP.RainbowMode and Color3.fromHSV(tick() % 10 / 10, 1, 1) or ESP.BoxColor
            line.BackgroundTransparency = ESP.BoxTransparency
            line.Size = UDim2.new(0, length, 0, ESP.BoxThickness)
            line.Position = UDim2.new(0, pos1.X, 0, pos1.Y)
            line.Rotation = math.deg(angle)
            line.AnchorPoint = Vector2.new(0, 0.5)
            line.ZIndex = ESP.AlwaysOnTop and 10 or 1
            line.Parent = skeleton
        end
    end
}

-- Get bounding box for a character
local function getBoundingBox(character, predict, predictionAmount)
    if not character then return nil end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    
    -- Get character position
    local position = hrp.Position
    
    -- Apply prediction if enabled
    if predict and predictionAmount then
        local velocity = hrp.Velocity
        position = position + (velocity * predictionAmount)
    end
    
    -- Get character size
    local size
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        -- Try to get accurate size based on character type
        if character:FindFirstChild("UpperTorso") then
            -- R15 character
            size = Vector3.new(2, 5, 1)
        else
            -- R6 character
            size = Vector3.new(4, 5, 1)
        end
    else
        -- Fallback size
        size = Vector3.new(4, 5, 1)
    end
    
    local cf = CFrame.new(position)
    
    -- Calculate corners
    local corners = {
        cf * CFrame.new(size.X/2, size.Y/2, 0).Position,
        cf * CFrame.new(-size.X/2, size.Y/2, 0).Position,
        cf * CFrame.new(-size.X/2, -size.Y/2, 0).Position,
        cf * CFrame.new(size.X/2, -size.Y/2, 0).Position
    }
    
    return corners
end

-- Check if a player is visible from a given position
local function isVisible(character, fromPosition)
    if not character then return false end
    
    local head = character:FindFirstChild("Head")
    if not head then return false end
    
    -- Cast ray from camera to head
    local direction = (head.Position - fromPosition).Unit
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {character, Camera}
    
    local raycastResult = workspace:Raycast(fromPosition, direction * 1000, raycastParams)
    
    -- If nothing hit, or hit part is part of character, then visible
    return raycastResult == nil or (raycastResult.Instance:IsDescendantOf(character))
end

-- Main ESP update function
local function updateESP()
    if not ESP.Enabled then
        -- Skip all processing if ESP is disabled
        return
    end
    
    Diagnostics.DrawCalls = 0
    
    -- Update ESP elements for each player
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and ESP.ShowPlayers then
            -- Update ESP box
            local box = ESPObjects[player]
            if box then
                local success = updateESPBox(player, box)
                Diagnostics.DrawCalls = Diagnostics.DrawCalls + 1
                
                if success then
                    -- Only update other elements if ESP box update was successful
                    
                    -- Update tracer
                    local tracer = TracerObjects[player]
                    if tracer then
                        updateTracer(player, tracer)
                        Diagnostics.DrawCalls = Diagnostics.DrawCalls + 1
                    end
                    
                    -- Update head dot
                    local headDot = HeadDotObjects[player]
                    if headDot then
                        updateHeadDot(player, headDot)
                        Diagnostics.DrawCalls = Diagnostics.DrawCalls + 1
                    end
                    
                    -- Update skeleton
                    local skeleton = SkeletonObjects[player]
                    if skeleton then
                        updateSkeleton(player, skeleton)
                        Diagnostics.DrawCalls = Diagnostics.DrawCalls + 1
                    end
                    
                    -- Update chams - this is handled automatically by the Highlight object
                end
            else
                -- Create box if missing
                createESPBox(player)
                
                if ESP.ShowTracers and not TracerObjects[player] then
                    createTracer(player)
                end
                
                if ESP.ShowHeadDot and not HeadDotObjects[player] then
                    createHeadDot(player)
                end
                
                if ESP.ShowSkeleton and not SkeletonObjects[player] then
                    createSkeleton(player)
                end
                
                if ESP.ShowChams and not ChamsObjects[player] then
                    createChams(player)
                end
            end
        end
    end
    
    -- Status checks if enabled
    if ESP.StatusChecks then
        -- Check if too many objects
        if Diagnostics.DrawCalls > 200 then
            logError("PerformanceWarning", "High number of draw calls: " .. Diagnostics.DrawCalls, false)
        end
        
        -- Check if FPS is too low
        local currentFPS = getAverageFPS()
        if currentFPS < 30 and currentFPS > 0 then
            logError("PerformanceError", "Low FPS: " .. currentFPS, true)
        end
    end
end

-- Toggle ESP on/off
local function toggleESP()
    ESP.Enabled = not ESP.Enabled
    
    -- Update visibility of all ESP objects
    for _, box in pairs(ESPObjects) do
        box.Visible = ESP.Enabled
    end
    
    for _, tracer in pairs(TracerObjects) do
        tracer.Visible = ESP.Enabled and ESP.ShowTracers
    end
    
    for _, headDot in pairs(HeadDotObjects) do
        headDot.Visible = ESP.Enabled and ESP.ShowHeadDot
    end
    
    for _, skeleton in pairs(SkeletonObjects) do
        skeleton.Visible = ESP.Enabled and ESP.ShowSkeleton
    end
    
    for _, chams in pairs(ChamsObjects) do
        if typeof(chams) == "Instance" then
            if chams:IsA("Highlight") then
                chams.Enabled = ESP.Enabled and ESP.ShowChams
            else
                chams.Visible = ESP.Enabled and ESP.ShowChams
            end
        end
    end
    
    -- Create notification
    createNotification("ESP " .. (ESP.Enabled and "Enabled" or "Disabled"), 
        ESP.Enabled and "ESP is now active" or "ESP has been turned off",
        ESP.Enabled and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100))
}

-- Initialize the ESP system
local function init()
    createESPGui()
    connectEvents()
    
    -- Create ESP objects for existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            task.delay(0.1 * math.random(), function() -- Stagger creation to avoid lag spike
                createESPBox(player)
                
                if ESP.ShowChams then
                    createChams(player)
                end
                
                if ESP.ShowTracers then
                    createTracer(player)
                end
                
                if ESP.ShowHeadDot then
                    createHeadDot(player)
                end
                
                if ESP.ShowSkeleton then
                    createSkeleton(player)
                end
            end)
        end
    end
    
    -- Create notification
    task.delay(1, function()
        createNotification("ESP System Loaded", 
            "Press F4 to toggle ESP\nPress F5 for diagnostics", 
            Color3.fromRGB(100, 200, 255))
    end)
}

-- Initialize
init()

-- Return API
return {
    ToggleESP = toggleESP,
    ResetESP = resetESP,
    ToggleDiagnostics = toggleDiagnostics,
    RunSelfTest = runSelfTest,
    GetSettings = function() return ESP end,
    SetSettings = function(settings)
        for key, value in pairs(settings) do
            ESP[key] = value
        end
        updateSettingsUI()
    end,
    OptimizePerformance = optimizePerformance,
    SetTarget = function(player) 
        TargetPlayer = player
    end,
    RefreshESP = refreshAllESP
}
